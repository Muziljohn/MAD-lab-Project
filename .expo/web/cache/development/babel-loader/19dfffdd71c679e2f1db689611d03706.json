{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getExpoPushTokenAsync;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar Application = _interopRequireWildcard(require(\"expo-application\"));\nvar _expoConstants = _interopRequireDefault(require(\"expo-constants\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _DevicePushTokenAutoRegistration = require(\"./DevicePushTokenAutoRegistration.fx\");\nvar _ServerRegistrationModule = _interopRequireDefault(require(\"./ServerRegistrationModule\"));\nvar _getDevicePushTokenAsync = _interopRequireDefault(require(\"./getDevicePushTokenAsync\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar productionBaseUrl = 'https://exp.host/--/api/v2/';\nfunction getExpoPushTokenAsync() {\n  var _Constants$manifest, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2, _Constants$manifest3, _Constants$manifest4, _Constants$manifest4$, _Constants$manifest4$2, _Constants$manifest5, _options$baseUrl, _options$url;\n  var options,\n    devicePushToken,\n    deviceId,\n    experienceId,\n    projectId,\n    applicationId,\n    type,\n    development,\n    baseUrl,\n    url,\n    body,\n    response,\n    statusInfo,\n    _body,\n    expoPushToken,\n    _args = arguments;\n  return _regeneratorRuntime().async(function getExpoPushTokenAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n        _context.t0 = options.devicePushToken;\n        if (_context.t0) {\n          _context.next = 6;\n          break;\n        }\n        _context.next = 5;\n        return _regeneratorRuntime().awrap((0, _getDevicePushTokenAsync.default)());\n      case 5:\n        _context.t0 = _context.sent;\n      case 6:\n        devicePushToken = _context.t0;\n        _context.t1 = options.deviceId;\n        if (_context.t1) {\n          _context.next = 12;\n          break;\n        }\n        _context.next = 11;\n        return _regeneratorRuntime().awrap(getDeviceIdAsync());\n      case 11:\n        _context.t1 = _context.sent;\n      case 12:\n        deviceId = _context.t1;\n        experienceId = options.experienceId || ((_Constants$manifest = _expoConstants.default.manifest) == null ? void 0 : _Constants$manifest.originalFullName) || ((_Constants$manifest2 = _expoConstants.default.manifest2) == null ? void 0 : (_Constants$manifest2$ = _Constants$manifest2.extra) == null ? void 0 : (_Constants$manifest2$2 = _Constants$manifest2$.expoClient) == null ? void 0 : _Constants$manifest2$2.originalFullName) || ((_Constants$manifest3 = _expoConstants.default.manifest) == null ? void 0 : _Constants$manifest3.id);\n        projectId = options.projectId || ((_Constants$manifest4 = _expoConstants.default.manifest2) == null ? void 0 : (_Constants$manifest4$ = _Constants$manifest4.extra) == null ? void 0 : (_Constants$manifest4$2 = _Constants$manifest4$.eas) == null ? void 0 : _Constants$manifest4$2.projectId) || ((_Constants$manifest5 = _expoConstants.default.manifest) == null ? void 0 : _Constants$manifest5.projectId);\n        if (!(!experienceId && !projectId)) {\n          _context.next = 17;\n          break;\n        }\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_NO_EXPERIENCE_ID', \"No experienceId or projectId found. If one or the other can't be inferred from the manifest (eg. in bare workflow), you have to pass one in yourself.\");\n      case 17:\n        applicationId = options.applicationId || Application.applicationId;\n        if (applicationId) {\n          _context.next = 20;\n          break;\n        }\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_NO_APPLICATION_ID', \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\");\n      case 20:\n        type = options.type || getTypeOfToken(devicePushToken);\n        _context.t2 = options.development;\n        if (_context.t2) {\n          _context.next = 26;\n          break;\n        }\n        _context.next = 25;\n        return _regeneratorRuntime().awrap(shouldUseDevelopmentNotificationService());\n      case 25:\n        _context.t2 = _context.sent;\n      case 26:\n        development = _context.t2;\n        baseUrl = (_options$baseUrl = options.baseUrl) != null ? _options$baseUrl : productionBaseUrl;\n        url = (_options$url = options.url) != null ? _options$url : baseUrl + \"push/getExpoPushToken\";\n        body = _objectSpread({\n          type: type,\n          deviceId: deviceId.toLowerCase(),\n          development: development,\n          appId: applicationId,\n          deviceToken: getDeviceToken(devicePushToken)\n        }, projectId ? {\n          projectId: projectId\n        } : {\n          experienceId: experienceId\n        });\n        _context.next = 32;\n        return _regeneratorRuntime().awrap(fetch(url, {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(body)\n        }).catch(function (error) {\n          throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_NETWORK_ERROR', \"Error encountered while fetching Expo token: \" + error + \".\");\n        }));\n      case 32:\n        response = _context.sent;\n        if (response.ok) {\n          _context.next = 45;\n          break;\n        }\n        statusInfo = response.statusText || response.status;\n        _body = undefined;\n        _context.prev = 36;\n        _context.next = 39;\n        return _regeneratorRuntime().awrap(response.text());\n      case 39:\n        _body = _context.sent;\n        _context.next = 44;\n        break;\n      case 42:\n        _context.prev = 42;\n        _context.t3 = _context[\"catch\"](36);\n      case 44:\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Error encountered while fetching Expo token, expected an OK response, received: \" + statusInfo + \" (body: \\\"\" + _body + \"\\\").\");\n      case 45:\n        _context.t4 = getExpoPushToken;\n        _context.next = 48;\n        return _regeneratorRuntime().awrap(parseResponse(response));\n      case 48:\n        _context.t5 = _context.sent;\n        expoPushToken = (0, _context.t4)(_context.t5);\n        _context.prev = 50;\n        if (!(options.url || options.baseUrl)) {\n          _context.next = 55;\n          break;\n        }\n        console.debug(\"[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.\");\n        _context.next = 57;\n        break;\n      case 55:\n        _context.next = 57;\n        return _regeneratorRuntime().awrap((0, _DevicePushTokenAutoRegistration.setAutoServerRegistrationEnabledAsync)(true));\n      case 57:\n        _context.next = 62;\n        break;\n      case 59:\n        _context.prev = 59;\n        _context.t6 = _context[\"catch\"](50);\n        console.warn('[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service', _context.t6);\n      case 62:\n        return _context.abrupt(\"return\", {\n          type: 'expo',\n          data: expoPushToken\n        });\n      case 63:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[36, 42], [50, 59]], Promise);\n}\nfunction parseResponse(response) {\n  return _regeneratorRuntime().async(function parseResponse$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        _context2.next = 3;\n        return _regeneratorRuntime().awrap(response.json());\n      case 3:\n        return _context2.abrupt(\"return\", _context2.sent);\n      case 6:\n        _context2.prev = 6;\n        _context2.t0 = _context2[\"catch\"](0);\n        _context2.prev = 8;\n        _context2.t1 = _expoModulesCore.CodedError;\n        _context2.t2 = JSON;\n        _context2.next = 13;\n        return _regeneratorRuntime().awrap(response.text());\n      case 13:\n        _context2.t3 = _context2.sent;\n        _context2.t4 = _context2.t2.stringify.call(_context2.t2, _context2.t3);\n        _context2.t5 = \"Expected a JSON response from server when fetching Expo token, received body: \" + _context2.t4;\n        _context2.t6 = _context2.t5 + \".\";\n        throw new _context2.t1('ERR_NOTIFICATIONS_SERVER_ERROR', _context2.t6);\n      case 20:\n        _context2.prev = 20;\n        _context2.t7 = _context2[\"catch\"](8);\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Expected a JSON response from server when fetching Expo token, received response: \" + JSON.stringify(response) + \".\");\n      case 23:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, [[0, 6], [8, 20]], Promise);\n}\nfunction getExpoPushToken(data) {\n  if (!data || !(typeof data === 'object') || !data.data || !(typeof data.data === 'object') || !data.data.expoPushToken || !(typeof data.data.expoPushToken === 'string')) {\n    throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Malformed response from server, expected \\\"{ data: { expoPushToken: string } }\\\", received: \" + JSON.stringify(data, null, 2) + \".\");\n  }\n  return data.data.expoPushToken;\n}\nfunction getDeviceIdAsync() {\n  return _regeneratorRuntime().async(function getDeviceIdAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.prev = 0;\n        if (_ServerRegistrationModule.default.getInstallationIdAsync) {\n          _context3.next = 3;\n          break;\n        }\n        throw new _expoModulesCore.UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n      case 3:\n        _context3.next = 5;\n        return _regeneratorRuntime().awrap(_ServerRegistrationModule.default.getInstallationIdAsync());\n      case 5:\n        return _context3.abrupt(\"return\", _context3.sent);\n      case 8:\n        _context3.prev = 8;\n        _context3.t0 = _context3[\"catch\"](0);\n        throw new _expoModulesCore.CodedError('ERR_NOTIF_DEVICE_ID', \"Could not have fetched installation ID of the application: \" + _context3.t0 + \".\");\n      case 11:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nfunction getDeviceToken(devicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n  return JSON.stringify(devicePushToken.data);\n}\nfunction shouldUseDevelopmentNotificationService() {\n  var notificationServiceEnvironment;\n  return _regeneratorRuntime().async(function shouldUseDevelopmentNotificationService$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        if (!(_expoModulesCore.Platform.OS === 'ios')) {\n          _context4.next = 11;\n          break;\n        }\n        _context4.prev = 1;\n        _context4.next = 4;\n        return _regeneratorRuntime().awrap(Application.getIosPushNotificationServiceEnvironmentAsync());\n      case 4:\n        notificationServiceEnvironment = _context4.sent;\n        if (!(notificationServiceEnvironment === 'development')) {\n          _context4.next = 7;\n          break;\n        }\n        return _context4.abrupt(\"return\", true);\n      case 7:\n        _context4.next = 11;\n        break;\n      case 9:\n        _context4.prev = 9;\n        _context4.t0 = _context4[\"catch\"](1);\n      case 11:\n        return _context4.abrupt(\"return\", false);\n      case 12:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, [[1, 9]], Promise);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}","map":{"version":3,"sources":["../src/getExpoPushTokenAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { setAutoServerRegistrationEnabledAsync } from './DevicePushTokenAutoRegistration.fx';\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { DevicePushToken, ExpoPushToken } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\n\nconst productionBaseUrl = 'https://exp.host/--/api/v2/';\n\ninterface Options {\n  // Endpoint URL override\n  baseUrl?: string;\n\n  // Request URL override\n  url?: string;\n\n  // Request body overrides\n  type?: string;\n  deviceId?: string;\n  development?: boolean;\n  experienceId?: string;\n  projectId?: string;\n  applicationId?: string;\n  devicePushToken?: DevicePushToken;\n}\n\nexport default async function getExpoPushTokenAsync(options: Options = {}): Promise<ExpoPushToken> {\n  const devicePushToken = options.devicePushToken || (await getDevicePushTokenAsync());\n\n  const deviceId = options.deviceId || (await getDeviceIdAsync());\n\n  const experienceId =\n    options.experienceId ||\n    Constants.manifest?.originalFullName ||\n    Constants.manifest2?.extra?.expoClient?.originalFullName ||\n    Constants.manifest?.id;\n\n  const projectId =\n    options.projectId ||\n    Constants.manifest2?.extra?.eas?.projectId ||\n    Constants.manifest?.projectId;\n\n  if (!experienceId && !projectId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_EXPERIENCE_ID',\n      \"No experienceId or projectId found. If one or the other can't be inferred from the manifest (eg. in bare workflow), you have to pass one in yourself.\"\n    );\n  }\n\n  const applicationId = options.applicationId || Application.applicationId;\n  if (!applicationId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_APPLICATION_ID',\n      \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\"\n    );\n  }\n  const type = options.type || getTypeOfToken(devicePushToken);\n  const development = options.development || (await shouldUseDevelopmentNotificationService());\n\n  const baseUrl = options.baseUrl ?? productionBaseUrl;\n  const url = options.url ?? `${baseUrl}push/getExpoPushToken`;\n\n  const body = {\n    type,\n    deviceId: deviceId.toLowerCase(),\n    development,\n    appId: applicationId,\n    deviceToken: getDeviceToken(devicePushToken),\n    ...(projectId ? { projectId } : { experienceId }),\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  }).catch((error) => {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NETWORK_ERROR',\n      `Error encountered while fetching Expo token: ${error}.`\n    );\n  });\n\n  if (!response.ok) {\n    const statusInfo = response.statusText || response.status;\n    let body: string | undefined = undefined;\n    try {\n      body = await response.text();\n    } catch {\n      // do nothing\n    }\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Error encountered while fetching Expo token, expected an OK response, received: ${statusInfo} (body: \"${body}\").`\n    );\n  }\n\n  const expoPushToken = getExpoPushToken(await parseResponse(response));\n\n  try {\n    if (options.url || options.baseUrl) {\n      console.debug(\n        `[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.`\n      );\n    } else {\n      await setAutoServerRegistrationEnabledAsync(true);\n    }\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service',\n      e\n    );\n  }\n\n  return {\n    type: 'expo',\n    data: expoPushToken,\n  };\n}\n\nasync function parseResponse(response: Response) {\n  try {\n    return await response.json();\n  } catch {\n    try {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received body: ${JSON.stringify(\n          await response.text()\n        )}.`\n      );\n    } catch {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received response: ${JSON.stringify(\n          response\n        )}.`\n      );\n    }\n  }\n}\n\nfunction getExpoPushToken(data: any) {\n  if (\n    !data ||\n    !(typeof data === 'object') ||\n    !data.data ||\n    !(typeof data.data === 'object') ||\n    !data.data.expoPushToken ||\n    !(typeof data.data.expoPushToken === 'string')\n  ) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Malformed response from server, expected \"{ data: { expoPushToken: string } }\", received: ${JSON.stringify(\n        data,\n        null,\n        2\n      )}.`\n    );\n  }\n\n  return data.data.expoPushToken as string;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIF_DEVICE_ID',\n      `Could not have fetched installation ID of the application: ${e}.`\n    );\n  }\n}\n\nfunction getDeviceToken(devicePushToken: DevicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n\n  return JSON.stringify(devicePushToken.data);\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}