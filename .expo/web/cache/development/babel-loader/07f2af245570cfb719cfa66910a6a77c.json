{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.__handlePersistedRegistrationInfoAsync = __handlePersistedRegistrationInfoAsync;\nexports.setAutoServerRegistrationEnabledAsync = setAutoServerRegistrationEnabledAsync;\nrequire(\"abort-controller/polyfill\");\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _ServerRegistrationModule = _interopRequireDefault(require(\"./ServerRegistrationModule\"));\nvar _TokenEmitter = require(\"./TokenEmitter\");\nvar _getDevicePushTokenAsync = _interopRequireDefault(require(\"./getDevicePushTokenAsync\"));\nvar _updateDevicePushTokenAsync = require(\"./utils/updateDevicePushTokenAsync\");\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar lastAbortController = null;\nfunction updatePushTokenAsync(token) {\n  var _lastAbortController;\n  return _regeneratorRuntime().async(function updatePushTokenAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        (_lastAbortController = lastAbortController) == null ? void 0 : _lastAbortController.abort();\n        lastAbortController = new AbortController();\n        _context.next = 4;\n        return _regeneratorRuntime().awrap((0, _updateDevicePushTokenAsync.updateDevicePushTokenAsync)(lastAbortController.signal, token));\n      case 4:\n        return _context.abrupt(\"return\", _context.sent);\n      case 5:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction setAutoServerRegistrationEnabledAsync(enabled) {\n  var _lastAbortController2;\n  return _regeneratorRuntime().async(function setAutoServerRegistrationEnabledAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        (_lastAbortController2 = lastAbortController) == null ? void 0 : _lastAbortController2.abort();\n        if (_ServerRegistrationModule.default.setRegistrationInfoAsync) {\n          _context2.next = 3;\n          break;\n        }\n        throw new _expoModulesCore.UnavailabilityError('ServerRegistrationModule', 'setRegistrationInfoAsync');\n      case 3:\n        _context2.next = 5;\n        return _regeneratorRuntime().awrap(_ServerRegistrationModule.default.setRegistrationInfoAsync(enabled ? JSON.stringify({\n          isEnabled: enabled\n        }) : null));\n      case 5:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction __handlePersistedRegistrationInfoAsync(registrationInfo) {\n  var _registration;\n  var registration, latestDevicePushToken;\n  return _regeneratorRuntime().async(function __handlePersistedRegistrationInfoAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (registrationInfo) {\n          _context3.next = 2;\n          break;\n        }\n        return _context3.abrupt(\"return\");\n      case 2:\n        registration = null;\n        try {\n          registration = JSON.parse(registrationInfo);\n        } catch (e) {\n          console.warn('[expo-notifications] Error encountered while fetching registration information for auto token updates.', e);\n        }\n        if ((_registration = registration) != null && _registration.isEnabled) {\n          _context3.next = 6;\n          break;\n        }\n        return _context3.abrupt(\"return\");\n      case 6:\n        _context3.prev = 6;\n        _context3.next = 9;\n        return _regeneratorRuntime().awrap((0, _getDevicePushTokenAsync.default)());\n      case 9:\n        latestDevicePushToken = _context3.sent;\n        _context3.next = 12;\n        return _regeneratorRuntime().awrap(updatePushTokenAsync(latestDevicePushToken));\n      case 12:\n        _context3.next = 17;\n        break;\n      case 14:\n        _context3.prev = 14;\n        _context3.t0 = _context3[\"catch\"](6);\n        console.warn('[expo-notifications] Error encountered while updating server registration with latest device push token.', _context3.t0);\n      case 17:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, [[6, 14]], Promise);\n}\nif (_ServerRegistrationModule.default.getRegistrationInfoAsync) {\n  (0, _TokenEmitter.addPushTokenListener)(function _callee(token) {\n    var registrationInfo, registration;\n    return _regeneratorRuntime().async(function _callee$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime().awrap(_ServerRegistrationModule.default.getRegistrationInfoAsync());\n        case 3:\n          registrationInfo = _context4.sent;\n          if (registrationInfo) {\n            _context4.next = 6;\n            break;\n          }\n          return _context4.abrupt(\"return\");\n        case 6:\n          registration = JSON.parse(registrationInfo);\n          if (!(registration != null && registration.isEnabled)) {\n            _context4.next = 10;\n            break;\n          }\n          _context4.next = 10;\n          return _regeneratorRuntime().awrap(updatePushTokenAsync(token));\n        case 10:\n          _context4.next = 15;\n          break;\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.warn('[expo-notifications] Error encountered while updating server registration with latest device push token.', _context4.t0);\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, null, null, [[0, 12]], Promise);\n  });\n  _ServerRegistrationModule.default.getRegistrationInfoAsync().then(__handlePersistedRegistrationInfoAsync);\n} else {\n  console.warn(\"[expo-notifications] Error encountered while fetching auto-registration state, new tokens will not be automatically registered on server.\", new _expoModulesCore.UnavailabilityError('ServerRegistrationModule', 'getRegistrationInfoAsync'));\n}","map":{"version":3,"sources":["../src/DevicePushTokenAutoRegistration.fx.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAwH;AAExH,IAAI,mBAAmB,GAA2B,IAAI;AACtD,SAAe,oBAAoB,CAAC,KAAsB;EAAA;EAAA;IAAA;MAAA;QAExD,wBAAA,mBAAmB,qBAAnB,qBAAqB,KAAK,EAAE;QAC5B,mBAAmB,GAAG,IAAI,eAAe,EAAE;QAAC;QAAA,mCAC/B,IAAA,sDAAoC,EAAC,mBAAmB,CAAC,MAAM,EAAE,KAAK,CAAC;MAAA;QAAA;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA;AAe/E,SAAe,qCAAqC,CAAC,OAAgB;EAAA;EAAA;IAAA;MAAA;QAG1E,yBAAA,mBAAmB,qBAAnB,sBAAqB,KAAK,EAAE;QAAC,IAExB,iCAAwB,CAAC,wBAAwB;UAAA;UAAA;QAAA;QAAA,MAC9C,IAAI,oCAAmB,CAAC,0BAA0B,EAAE,0BAA0B,CAAC;MAAA;QAAA;QAAA,mCAGjF,iCAAwB,CAAC,wBAAwB,CACrD,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;UAAE,SAAS,EAAE;QAAO,CAAE,CAAC,GAAG,IAAI,CACxD;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA;AAMI,SAAe,sCAAsC,CAC1D,gBAA2C;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA,IAEtC,gBAAgB;UAAA;UAAA;QAAA;QAAA;MAAA;QAKjB,YAAY,GAAuC,IAAI;QAC3D,IAAI;UACF,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;SAC5C,CAAC,OAAO,CAAC,EAAE;UACV,OAAO,CAAC,IAAI,CACV,wGAAwG,EACxG,CAAC,CACF;;QACF,qBAEI,YAAY,aAAZ,cAAc,SAAS;UAAA;UAAA;QAAA;QAAA;MAAA;QAAA;QAAA;QAAA,mCAQU,IAAA,gCAAuB,GAAE;MAAA;QAAvD,qBAAqB;QAAA;QAAA,mCACrB,oBAAoB,CAAC,qBAAqB,CAAC;MAAA;QAAA;QAAA;MAAA;QAAA;QAAA;QAEjD,OAAO,CAAC,IAAI,CACV,0GAA0G,eAE3G;MAAC;MAAA;QAAA;IAAA;EAAA;AAAA;AAIN,IAAI,iCAAwB,CAAC,wBAAwB,EAAE;EAGrD,IAAA,kCAAoB,EAAC,iBAAO,KAAK;IAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAAA,mCAKE,iCAAwB,CAAC,wBAAyB,EAAE;QAAA;UAA7E,gBAAgB;UAAA,IAEjB,gBAAgB;YAAA;YAAA;UAAA;UAAA;QAAA;UAKf,YAAY,GAAuC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;UAAA,MACjF,YAAY,YAAZ,YAAY,CAAE,SAAS;YAAA;YAAA;UAAA;UAAA;UAAA,mCAGnB,oBAAoB,CAAC,KAAK,CAAC;QAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAGnC,OAAO,CAAC,IAAI,CACV,0GAA0G,eAE3G;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA,CAEL,CAAC;EAKF,iCAAwB,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,sCAAsC,CAAC;CACjG,MAAM;EACL,OAAO,CAAC,IAAI,8IAEV,IAAI,oCAAmB,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAChF;AACF","sourcesContent":["import 'abort-controller/polyfill';\nimport { UnavailabilityError } from 'expo-modules-core';\n\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { addPushTokenListener } from './TokenEmitter';\nimport { DevicePushToken } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\nimport { updateDevicePushTokenAsync as updateDevicePushTokenAsyncWithSignal } from './utils/updateDevicePushTokenAsync';\n\nlet lastAbortController: AbortController | null = null;\nasync function updatePushTokenAsync(token: DevicePushToken) {\n  // Abort current update process\n  lastAbortController?.abort();\n  lastAbortController = new AbortController();\n  return await updateDevicePushTokenAsyncWithSignal(lastAbortController.signal, token);\n}\n\n/**\n * Encapsulates device server registration data\n */\nexport type DevicePushTokenRegistration = {\n  isEnabled: boolean;\n};\n\n/**\n * Sets the registration information so that the device push token gets pushed\n * to the given registration endpoint\n * @param registration Registration endpoint to inform of new tokens\n */\nexport async function setAutoServerRegistrationEnabledAsync(enabled: boolean) {\n  // We are overwriting registration, so we shouldn't let\n  // any pending request complete.\n  lastAbortController?.abort();\n\n  if (!ServerRegistrationModule.setRegistrationInfoAsync) {\n    throw new UnavailabilityError('ServerRegistrationModule', 'setRegistrationInfoAsync');\n  }\n\n  await ServerRegistrationModule.setRegistrationInfoAsync(\n    enabled ? JSON.stringify({ isEnabled: enabled }) : null\n  );\n}\n\n/**\n * This function is exported only for testing purposes.\n */\nexport async function __handlePersistedRegistrationInfoAsync(\n  registrationInfo: string | null | undefined\n) {\n  if (!registrationInfo) {\n    // No registration info, nothing to do\n    return;\n  }\n\n  let registration: DevicePushTokenRegistration | null = null;\n  try {\n    registration = JSON.parse(registrationInfo);\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Error encountered while fetching registration information for auto token updates.',\n      e\n    );\n  }\n\n  if (!registration?.isEnabled) {\n    // Registration is invalid or not enabled, nothing more to do\n    return;\n  }\n\n  try {\n    // Since the registration is enabled, fetching a \"new\" device token\n    // shouldn't be a problem.\n    const latestDevicePushToken = await getDevicePushTokenAsync();\n    await updatePushTokenAsync(latestDevicePushToken);\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Error encountered while updating server registration with latest device push token.',\n      e\n    );\n  }\n}\n\nif (ServerRegistrationModule.getRegistrationInfoAsync) {\n  // A global scope (to get all the updates) device push token\n  // subscription, never cleared.\n  addPushTokenListener(async (token) => {\n    try {\n      // Before updating the push token on server we always check if we should\n      // Since modules can't change their method availability while running, we\n      // can assert it's defined.\n      const registrationInfo = await ServerRegistrationModule.getRegistrationInfoAsync!();\n\n      if (!registrationInfo) {\n        // Registration is not enabled\n        return;\n      }\n\n      const registration: DevicePushTokenRegistration | null = JSON.parse(registrationInfo);\n      if (registration?.isEnabled) {\n        // Dispatch an abortable task to update\n        // registration with new token.\n        await updatePushTokenAsync(token);\n      }\n    } catch (e) {\n      console.warn(\n        '[expo-notifications] Error encountered while updating server registration with latest device push token.',\n        e\n      );\n    }\n  });\n\n  // Verify if persisted registration\n  // has successfully uploaded last known\n  // device push token. If not, retry.\n  ServerRegistrationModule.getRegistrationInfoAsync().then(__handlePersistedRegistrationInfoAsync);\n} else {\n  console.warn(\n    `[expo-notifications] Error encountered while fetching auto-registration state, new tokens will not be automatically registered on server.`,\n    new UnavailabilityError('ServerRegistrationModule', 'getRegistrationInfoAsync')\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}