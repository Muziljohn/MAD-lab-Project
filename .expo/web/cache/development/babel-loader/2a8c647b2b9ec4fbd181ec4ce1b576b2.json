{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = BottomTabBar;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _native = require(\"@react-navigation/native\");\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _BottomTabItem = _interopRequireDefault(require(\"./BottomTabItem\"));\nvar _useWindowDimensions = _interopRequireDefault(require(\"../utils/useWindowDimensions\"));\nvar _useIsKeyboardShown = _interopRequireDefault(require(\"../utils/useIsKeyboardShown\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar DEFAULT_TABBAR_HEIGHT = 49;\nvar COMPACT_TABBAR_HEIGHT = 32;\nvar DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\nvar useNativeDriver = _reactNative.Platform.OS !== 'web';\nfunction BottomTabBar(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    activeBackgroundColor = _ref.activeBackgroundColor,\n    activeTintColor = _ref.activeTintColor,\n    _ref$adaptive = _ref.adaptive,\n    adaptive = _ref$adaptive === void 0 ? true : _ref$adaptive,\n    allowFontScaling = _ref.allowFontScaling,\n    inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n    inactiveTintColor = _ref.inactiveTintColor,\n    _ref$keyboardHidesTab = _ref.keyboardHidesTabBar,\n    keyboardHidesTabBar = _ref$keyboardHidesTab === void 0 ? false : _ref$keyboardHidesTab,\n    labelPosition = _ref.labelPosition,\n    labelStyle = _ref.labelStyle,\n    iconStyle = _ref.iconStyle,\n    safeAreaInsets = _ref.safeAreaInsets,\n    showLabel = _ref.showLabel,\n    style = _ref.style,\n    tabStyle = _ref.tabStyle;\n  var _safeAreaInsets$top, _safeAreaInsets$right, _safeAreaInsets$botto, _safeAreaInsets$left;\n  var _useTheme = (0, _native.useTheme)(),\n    colors = _useTheme.colors;\n  var buildLink = (0, _native.useLinkBuilder)();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var dimensions = (0, _useWindowDimensions.default)();\n  var isKeyboardShown = (0, _useIsKeyboardShown.default)();\n  var shouldShowTabBar = focusedOptions.tabBarVisible !== false && !(keyboardHidesTabBar && isKeyboardShown);\n  var visibilityAnimationConfigRef = _react.default.useRef(focusedOptions.tabBarVisibilityAnimationConfig);\n  _react.default.useEffect(function () {\n    visibilityAnimationConfigRef.current = focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n  var _React$useState = _react.default.useState(!shouldShowTabBar),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    isTabBarHidden = _React$useState2[0],\n    setIsTabBarHidden = _React$useState2[1];\n  var _React$useState3 = _react.default.useState(function () {\n      return new _reactNative.Animated.Value(shouldShowTabBar ? 1 : 0);\n    }),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 1),\n    visible = _React$useState4[0];\n  _react.default.useEffect(function () {\n    var visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n    if (shouldShowTabBar) {\n      var _visibilityAnimationC, _visibilityAnimationC2;\n      var animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC = visibilityAnimationConfig.show) === null || _visibilityAnimationC === void 0 ? void 0 : _visibilityAnimationC.animation) === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;\n      animation(visible, _objectSpread({\n        toValue: 1,\n        useNativeDriver: useNativeDriver,\n        duration: 250\n      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC2 = visibilityAnimationConfig.show) === null || _visibilityAnimationC2 === void 0 ? void 0 : _visibilityAnimationC2.config)).start(function (_ref2) {\n        var finished = _ref2.finished;\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      var _visibilityAnimationC3, _visibilityAnimationC4;\n      setIsTabBarHidden(true);\n      var _animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC3 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC3 === void 0 ? void 0 : _visibilityAnimationC3.animation) === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;\n      _animation(visible, _objectSpread({\n        toValue: 0,\n        useNativeDriver: useNativeDriver,\n        duration: 200\n      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC4 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC4 === void 0 ? void 0 : _visibilityAnimationC4.config)).start();\n    }\n  }, [visible, shouldShowTabBar]);\n  var _React$useState5 = _react.default.useState({\n      height: 0,\n      width: dimensions.width\n    }),\n    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n    layout = _React$useState6[0],\n    setLayout = _React$useState6[1];\n  var isLandscape = function isLandscape() {\n    return dimensions.width > dimensions.height;\n  };\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n      height = _e$nativeEvent$layout.height,\n      width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height: height,\n          width: width\n        };\n      }\n    });\n  };\n  var routes = state.routes;\n  var shouldUseHorizontalLabels = function shouldUseHorizontalLabels() {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n    if (!adaptive) {\n      return false;\n    }\n    if (layout.width >= 768) {\n      var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n      var flattenedStyle = _reactNative.StyleSheet.flatten(tabStyle);\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      return isLandscape();\n    }\n  };\n  var defaultInsets = (0, _reactNativeSafeAreaContext.useSafeArea)();\n  var insets = {\n    top: (_safeAreaInsets$top = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top) !== null && _safeAreaInsets$top !== void 0 ? _safeAreaInsets$top : defaultInsets.top,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : defaultInsets.right,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : defaultInsets.bottom,\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : defaultInsets.left\n  };\n  var paddingBottom = Math.max(insets.bottom - _reactNative.Platform.select({\n    ios: 4,\n    default: 0\n  }), 0);\n  var getDefaultTabBarHeight = function getDefaultTabBarHeight() {\n    if (_reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && isLandscape() && shouldUseHorizontalLabels()) {\n      return COMPACT_TABBAR_HEIGHT;\n    }\n    return DEFAULT_TABBAR_HEIGHT;\n  };\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.tabBar, {\n      backgroundColor: colors.card,\n      borderTopColor: colors.border\n    }, {\n      transform: [{\n        translateY: visible.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height + paddingBottom + _reactNative.StyleSheet.hairlineWidth, 0]\n        })\n      }],\n      position: isTabBarHidden ? 'absolute' : null\n    }, {\n      height: getDefaultTabBarHeight() + paddingBottom,\n      paddingBottom: paddingBottom,\n      paddingHorizontal: Math.max(insets.left, insets.right)\n    }, style],\n    pointerEvents: isTabBarHidden ? 'none' : 'auto'\n  }, _react.default.createElement(_reactNative.View, {\n    style: styles.content,\n    onLayout: handleLayout\n  }, routes.map(function (route, index) {\n    var focused = index === state.index;\n    var options = descriptors[route.key].options;\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, _native.CommonActions.navigate(route.name)), {}, {\n          target: state.key\n        }));\n      }\n    };\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' ? \"\".concat(label, \", tab, \").concat(index + 1, \" of \").concat(routes.length) : undefined;\n    return _react.default.createElement(_native.NavigationContext.Provider, {\n      key: route.key,\n      value: descriptors[route.key].navigation\n    }, _react.default.createElement(_native.NavigationRouteContext.Provider, {\n      value: route\n    }, _react.default.createElement(_BottomTabItem.default, {\n      route: route,\n      focused: focused,\n      horizontal: shouldUseHorizontalLabels(),\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityLabel: accessibilityLabel,\n      to: buildLink(route.name, route.params),\n      testID: options.tabBarTestID,\n      allowFontScaling: allowFontScaling,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      button: options.tabBarButton,\n      icon: options.tabBarIcon,\n      badge: options.tabBarBadge,\n      label: label,\n      showLabel: showLabel,\n      labelStyle: labelStyle,\n      iconStyle: iconStyle,\n      style: tabStyle\n    })));\n  })));\n}\nvar styles = _reactNative.StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,\n    elevation: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["BottomTabBar.tsx"],"names":["DEFAULT_TABBAR_HEIGHT","COMPACT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","OS","BottomTabBar","state","navigation","descriptors","activeBackgroundColor","activeTintColor","adaptive","allowFontScaling","inactiveBackgroundColor","inactiveTintColor","keyboardHidesTabBar","labelPosition","labelStyle","iconStyle","safeAreaInsets","showLabel","style","tabStyle","colors","useTheme","buildLink","useLinkBuilder","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","dimensions","useWindowDimensions","isKeyboardShown","useIsKeyboardShown","shouldShowTabBar","tabBarVisible","visibilityAnimationConfigRef","React","useRef","tabBarVisibilityAnimationConfig","useEffect","current","isTabBarHidden","setIsTabBarHidden","useState","visible","Animated","Value","visibilityAnimationConfig","animation","show","spring","timing","toValue","duration","config","start","finished","hide","layout","setLayout","height","width","isLandscape","handleLayout","e","nativeEvent","shouldUseHorizontalLabels","maxTabItemWidth","flattenedStyle","StyleSheet","flatten","maxWidth","length","defaultInsets","useSafeArea","insets","top","right","bottom","left","paddingBottom","max","select","ios","default","getDefaultTabBarHeight","isPad","styles","tabBar","backgroundColor","card","borderTopColor","border","transform","translateY","interpolate","inputRange","outputRange","hairlineWidth","position","paddingHorizontal","Math","content","map","route","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","CommonActions","navigate","name","onLongPress","label","tabBarLabel","undefined","title","accessibilityLabel","tabBarAccessibilityLabel","params","tabBarTestID","tabBarButton","tabBarIcon","tabBarBadge","create","borderTopWidth","elevation","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Platform,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  CommonActions,\n  useTheme,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nimport type { BottomTabBarProps } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst COMPACT_TABBAR_HEIGHT = 32;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive = true,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  iconStyle,\n  safeAreaInsets,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const dimensions = useWindowDimensions();\n  const isKeyboardShown = useIsKeyboardShown();\n\n  const shouldShowTabBar =\n    focusedOptions.tabBarVisible !== false &&\n    !(keyboardHidesTabBar && isKeyboardShown);\n\n  const visibilityAnimationConfigRef = React.useRef(\n    focusedOptions.tabBarVisibilityAnimationConfig\n  );\n\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current =\n      focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      const animation =\n        visibilityAnimationConfig?.show?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...visibilityAnimationConfig?.show?.config,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      const animation =\n        visibilityAnimationConfig?.hide?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...visibilityAnimationConfig?.hide?.config,\n      }).start();\n    }\n  }, [visible, shouldShowTabBar]);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const isLandscape = () => dimensions.width > dimensions.height;\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n  const shouldUseHorizontalLabels = () => {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      // Screen size matches a tablet\n      let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      return isLandscape();\n    }\n  };\n\n  const defaultInsets = useSafeArea();\n\n  const insets = {\n    top: safeAreaInsets?.top ?? defaultInsets.top,\n    right: safeAreaInsets?.right ?? defaultInsets.right,\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\n    left: safeAreaInsets?.left ?? defaultInsets.left,\n  };\n\n  const paddingBottom = Math.max(\n    insets.bottom - Platform.select({ ios: 4, default: 0 }),\n    0\n  );\n\n  const getDefaultTabBarHeight = () => {\n    if (\n      Platform.OS === 'ios' &&\n      !Platform.isPad &&\n      isLandscape() &&\n      shouldUseHorizontalLabels()\n    ) {\n      return COMPACT_TABBAR_HEIGHT;\n    }\n    return DEFAULT_TABBAR_HEIGHT;\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                  layout.height + paddingBottom + StyleSheet.hairlineWidth,\n                  0,\n                ],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : (null as any),\n        },\n        {\n          height: getDefaultTabBarHeight() + paddingBottom,\n          paddingBottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        style,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n    >\n      <View style={styles.content} onLayout={handleLayout}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate(route.name),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={shouldUseHorizontalLabels()}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={allowFontScaling}\n                  activeTintColor={activeTintColor}\n                  inactiveTintColor={inactiveTintColor}\n                  activeBackgroundColor={activeBackgroundColor}\n                  inactiveBackgroundColor={inactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={options.tabBarIcon}\n                  badge={options.tabBarBadge}\n                  label={label}\n                  showLabel={showLabel}\n                  labelStyle={labelStyle}\n                  iconStyle={iconStyle}\n                  style={tabStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}