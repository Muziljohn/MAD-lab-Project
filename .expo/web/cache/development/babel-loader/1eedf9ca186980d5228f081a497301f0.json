{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocationSubscriber = exports.HeadingSubscriber = void 0;\nexports._getCurrentWatchId = _getCurrentWatchId;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _ExpoLocation = _interopRequireDefault(require(\"./ExpoLocation\"));\nvar _LocationEventEmitter = require(\"./LocationEventEmitter\");\nvar nextWatchId = 0;\nvar Subscriber = function () {\n  function Subscriber(eventName, eventDataField) {\n    (0, _classCallCheck2.default)(this, Subscriber);\n    this.callbacks = {};\n    this.eventSubscription = null;\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n  (0, _createClass2.default)(Subscriber, [{\n    key: \"maybeInitializeSubscription\",\n    value: function maybeInitializeSubscription() {\n      var _this = this;\n      if (this.eventSubscription) {\n        return;\n      }\n      this.eventSubscription = _LocationEventEmitter.LocationEventEmitter.addListener(this.eventName, function (event) {\n        return _this.trigger(event);\n      });\n    }\n  }, {\n    key: \"registerCallback\",\n    value: function registerCallback(callback) {\n      this.maybeInitializeSubscription();\n      var id = ++nextWatchId;\n      this.callbacks[id] = callback;\n      return id;\n    }\n  }, {\n    key: \"unregisterCallback\",\n    value: function unregisterCallback(id) {\n      if (!this.callbacks[id]) {\n        return;\n      }\n      delete this.callbacks[id];\n      _ExpoLocation.default.removeWatchAsync(id);\n      if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n        _LocationEventEmitter.LocationEventEmitter.removeSubscription(this.eventSubscription);\n        this.eventSubscription = null;\n      }\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(event) {\n      var watchId = event.watchId;\n      var callback = this.callbacks[watchId];\n      if (callback) {\n        callback(event[this.eventDataField]);\n      } else {\n        _ExpoLocation.default.removeWatchAsync(watchId);\n      }\n    }\n  }]);\n  return Subscriber;\n}();\nvar LocationSubscriber = new Subscriber('Expo.locationChanged', 'location');\nexports.LocationSubscriber = LocationSubscriber;\nvar HeadingSubscriber = new Subscriber('Expo.headingChanged', 'heading');\nexports.HeadingSubscriber = HeadingSubscriber;\nfunction _getCurrentWatchId() {\n  return nextWatchId;\n}","map":{"version":3,"sources":["../src/LocationSubscribers.ts"],"names":[],"mappings":";;;;;;;;AAEA;AAEA;AAOA,IAAI,WAAW,GAAG,CAAC;AAAC,IAEd,UAAU;EAMd,oBAAY,SAAiB,EAAE,cAAsB,EAAA;IAAA;IAAA,KAH7C,SAAS,GAAmC,CAAA,CAAE;IAAA,KAC9C,iBAAiB,GAAwB,IAAI;IAGnD,IAAI,CAAC,SAAS,GAAG,SAAS;IAC1B,IAAI,CAAC,cAAc,GAAG,cAAc;EACtC;EAAC;IAAA;IAAA,OAED,uCAA2B;MAAA;MACzB,IAAI,IAAI,CAAC,iBAAiB,EAAE;QAC1B;MACD;MACD,IAAI,CAAC,iBAAiB,GAAG,0CAAoB,CAAC,WAAW,CACvD,IAAI,CAAC,SAAS,EACd,UAAC,KAAkB;QAAA,OAAK,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC;MAAA,EAC5C;IACH;EAAC;IAAA;IAAA,OAKD,0BAAiB,QAAsB,EAAA;MACrC,IAAI,CAAC,2BAA2B,EAAE;MAClC,IAAM,EAAE,GAAG,EAAE,WAAW;MACxB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,QAAQ;MAC7B,OAAO,EAAE;IACX;EAAC;IAAA;IAAA,OAKD,4BAAmB,EAAU,EAAA;MAE3B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;QACvB;MACD;MAED,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;MACzB,qBAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC;MAEjC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,iBAAiB,EAAE;QACtE,0CAAoB,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAC/D,IAAI,CAAC,iBAAiB,GAAG,IAAI;MAC9B;IACH;EAAC;IAAA;IAAA,OAED,iBAAQ,KAAkB,EAAA;MACxB,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO;MAC7B,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;MAExC,IAAI,QAAQ,EAAE;QACZ,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;OACrC,MAAM;QACL,qBAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC;MACvC;IACH;EAAC;EAAA;AAAA;AAGI,IAAM,kBAAkB,GAAG,IAAI,UAAU,CAC9C,sBAAsB,EACtB,UAAU,CACX;AAAC;AACK,IAAM,iBAAiB,GAAG,IAAI,UAAU,CAC7C,qBAAqB,EACrB,SAAS,CACV;AAAC;AAKI,SAAU,kBAAkB,GAAA;EAChC,OAAO,WAAW;AACpB","sourcesContent":["import { Subscription } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationCallback, LocationHeadingCallback } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\n\ntype EventObject = {\n  watchId: number;\n  [key: string]: any;\n};\n\nlet nextWatchId = 0;\n\nclass Subscriber<CallbackType extends LocationCallback | LocationHeadingCallback> {\n  private eventName: string;\n  private eventDataField: string;\n  private callbacks: { [id: string]: CallbackType } = {};\n  private eventSubscription: Subscription | null = null;\n\n  constructor(eventName: string, eventDataField: string) {\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  maybeInitializeSubscription() {\n    if (this.eventSubscription) {\n      return;\n    }\n    this.eventSubscription = LocationEventEmitter.addListener(\n      this.eventName,\n      (event: EventObject) => this.trigger(event)\n    );\n  }\n\n  /**\n   * Registers given callback under new id which is then returned.\n   */\n  registerCallback(callback: CallbackType): number {\n    this.maybeInitializeSubscription();\n    const id = ++nextWatchId;\n    this.callbacks[id] = callback;\n    return id;\n  }\n\n  /**\n   * Unregisters a callback with given id and revokes the subscription if possible.\n   */\n  unregisterCallback(id: number): void {\n    // Do nothing if we have already unregistered the callback.\n    if (!this.callbacks[id]) {\n      return;\n    }\n\n    delete this.callbacks[id];\n    ExpoLocation.removeWatchAsync(id);\n\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\n      this.eventSubscription = null;\n    }\n  }\n\n  trigger(event: EventObject): void {\n    const watchId = event.watchId;\n    const callback = this.callbacks[watchId];\n\n    if (callback) {\n      callback(event[this.eventDataField]);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  }\n}\n\nexport const LocationSubscriber = new Subscriber<LocationCallback>(\n  'Expo.locationChanged',\n  'location'\n);\nexport const HeadingSubscriber = new Subscriber<LocationHeadingCallback>(\n  'Expo.headingChanged',\n  'heading'\n);\n\n/**\n * @private Necessary for some unit tests.\n */\nexport function _getCurrentWatchId(): number {\n  return nextWatchId;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}