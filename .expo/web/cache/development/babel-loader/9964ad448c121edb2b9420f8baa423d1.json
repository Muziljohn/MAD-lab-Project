{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nvar EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n    cardOverlay = _ref.cardOverlay,\n    cardOverlayEnabled = _ref.cardOverlayEnabled,\n    cardShadowEnabled = _ref.cardShadowEnabled,\n    cardStyle = _ref.cardStyle,\n    cardStyleInterpolator = _ref.cardStyleInterpolator,\n    closing = _ref.closing,\n    gesture = _ref.gesture,\n    focused = _ref.focused,\n    gestureDirection = _ref.gestureDirection,\n    gestureEnabled = _ref.gestureEnabled,\n    gestureResponseDistance = _ref.gestureResponseDistance,\n    gestureVelocityImpact = _ref.gestureVelocityImpact,\n    getPreviousRoute = _ref.getPreviousRoute,\n    getFocusedRoute = _ref.getFocusedRoute,\n    mode = _ref.mode,\n    headerMode = _ref.headerMode,\n    headerShown = _ref.headerShown,\n    headerStyleInterpolator = _ref.headerStyleInterpolator,\n    headerTransparent = _ref.headerTransparent,\n    headerHeight = _ref.headerHeight,\n    onHeaderHeightChange = _ref.onHeaderHeightChange,\n    index = _ref.index,\n    layout = _ref.layout,\n    onCloseRoute = _ref.onCloseRoute,\n    onOpenRoute = _ref.onOpenRoute,\n    onPageChangeCancel = _ref.onPageChangeCancel,\n    onPageChangeConfirm = _ref.onPageChangeConfirm,\n    onPageChangeStart = _ref.onPageChangeStart,\n    onTransitionEnd = _ref.onTransitionEnd,\n    onTransitionStart = _ref.onTransitionStart,\n    previousScene = _ref.previousScene,\n    renderHeader = _ref.renderHeader,\n    renderScene = _ref.renderScene,\n    safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n    safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n    safeAreaInsetRight = _ref.safeAreaInsetRight,\n    safeAreaInsetTop = _ref.safeAreaInsetTop,\n    scene = _ref.scene,\n    transitionSpec = _ref.transitionSpec;\n  React.useEffect(function () {\n    onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n  }, [active, onPageChangeConfirm]);\n  var handleOpen = function handleOpen() {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, false);\n    onOpenRoute({\n      route: scene.route\n    });\n  };\n  var handleClose = function handleClose() {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, true);\n    onCloseRoute({\n      route: scene.route\n    });\n  };\n  var handleTransitionStart = function handleTransitionStart(_ref2) {\n    var closing = _ref2.closing;\n    if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: scene.route\n    }, closing);\n  };\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var _React$useState = React.useState('box-none'),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    pointerEvents = _React$useState2[0],\n    setPointerEvents = _React$useState2[1];\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransitionStart: handleTransitionStart,\n    onGestureBegin: onPageChangeStart,\n    onGestureCanceled: onPageChangeCancel,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: headerMode === 'float' && !headerTransparent && headerShown !== false ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: StyleSheet.absoluteFill\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousRoute: getPreviousRoute,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["React","useTheme","Card","HeaderHeightContext","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","headerTransparent","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","useEffect","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","listener","progress","next","addListener","value","removeListener","current","marginTop","backgroundColor","background","StyleSheet","absoluteFill","styles","container","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // `addListener` may not exist on web and older versions of React Native\n    // @ts-ignore\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-ignore\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            {renderScene({ route: scene.route })}\n          </HeaderHeightContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousRoute,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}