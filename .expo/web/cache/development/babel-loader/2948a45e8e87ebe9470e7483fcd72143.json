{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport SceneView from \"./SceneView\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useNavigationCache from \"./useNavigationCache\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n    screens = _ref.screens,\n    navigation = _ref.navigation,\n    screenOptions = _ref.screenOptions,\n    onAction = _ref.onAction,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    addActionListener = _ref.addActionListener,\n    addFocusedListener = _ref.addFocusedListener,\n    addStateGetter = _ref.addStateGetter,\n    onRouteFocus = _ref.onRouteFocus,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    options = _React$useState2[0],\n    setOptions = _React$useState2[1];\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    trackAction = _React$useContext.trackAction;\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addActionListener: addActionListener,\n      addFocusedListener: addFocusedListener,\n      addStateGetter: addStateGetter,\n      onRouteFocus: onRouteFocus,\n      trackAction: trackAction\n    };\n  }, [navigation, onAction, addActionListener, addFocusedListener, onRouteFocus, addStateGetter, trackAction]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  return state.routes.reduce(function (acc, route) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          getState: getState,\n          setState: setState\n        }));\n      },\n      options: _objectSpread(_objectSpread(_objectSpread({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n        route: route,\n        navigation: navigation\n      })), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n        route: route,\n        navigation: navigation\n      })), options[route.key])\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","router","emitter","options","setOptions","useState","trackAction","useContext","context","useMemo","navigations","routes","reduce","acc","route","screen","name","key","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  FocusedNavigationListener,\n  NavigatorStateGetter,\n} from './NavigationBuilderContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addActionListener: (listener: ChildActionListener) => void;\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addActionListener,\n  addFocusedListener,\n  addStateGetter,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { trackAction } = React.useContext(NavigationBuilderContext);\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      onRouteFocus,\n      trackAction,\n    }),\n    [\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      onRouteFocus,\n      addStateGetter,\n      trackAction,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce(\n    (acc, route) => {\n      const screen = screens[route.name];\n      const navigation = navigations[route.key];\n\n      acc[route.key] = {\n        navigation,\n        render() {\n          return (\n            <NavigationBuilderContext.Provider key={route.key} value={context}>\n              <SceneView\n                navigation={navigation}\n                route={route}\n                screen={screen}\n                getState={getState}\n                setState={setState}\n              />\n            </NavigationBuilderContext.Provider>\n          );\n        },\n        options: {\n          // The default `screenOptions` passed to the navigator\n          ...(typeof screenOptions === 'object' || screenOptions == null\n            ? screenOptions\n            : screenOptions({\n                // @ts-ignore\n                route,\n                navigation,\n              })),\n          // The `options` prop passed to `Screen` elements\n          ...(typeof screen.options === 'object' || screen.options == null\n            ? screen.options\n            : screen.options({\n                // @ts-ignore\n                route,\n                // @ts-ignore\n                navigation,\n              })),\n          // The options set via `navigation.setOptions`\n          ...options[route.key],\n        },\n      };\n\n      return acc;\n    },\n    {} as {\n      [key: string]: Descriptor<ParamListBase, string, State, ScreenOptions>;\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}