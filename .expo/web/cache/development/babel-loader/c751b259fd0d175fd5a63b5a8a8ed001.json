{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.usePermissions = usePermissions;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _Permissions = require(\"./Permissions\");\nfunction usePermissions(type) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isMounted = (0, _react.useRef)(true);\n  var _useState = (0, _react.useState)(),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _options$ask = options.ask,\n    ask = _options$ask === void 0 ? false : _options$ask,\n    _options$get = options.get,\n    get = _options$get === void 0 ? true : _options$get;\n  var types = Array.isArray(type) ? type : [type];\n  var askPermissions = (0, _react.useCallback)(function () {\n    return _Permissions.askAsync.apply(void 0, (0, _toConsumableArray2.default)(types)).then(function (response) {\n      if (isMounted.current) {\n        setData(response);\n      }\n    });\n  }, [type]);\n  var getPermissions = (0, _react.useCallback)(function () {\n    return _Permissions.getAsync.apply(void 0, (0, _toConsumableArray2.default)(types)).then(function (response) {\n      if (isMounted.current) {\n        setData(response);\n      }\n    });\n  }, [type]);\n  (0, _react.useEffect)(function () {\n    if (ask) {\n      askPermissions();\n    }\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n  (0, _react.useEffect)(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  return [data, askPermissions, getPermissions];\n}","map":{"version":3,"sources":["../src/PermissionsHooks.ts"],"names":[],"mappings":";;;;;;;AAAA;AAEA;AAmBM,SAAU,cAAc,CAC5B,IAAuC,EACP;EAAA,IAAhC,OAAA,uEAA8B,CAAA,CAAE;EAEhC,IAAM,SAAS,GAAG,IAAA,aAAM,EAAC,IAAI,CAAC;EAC9B,gBAAwB,IAAA,eAAQ,GAAsB;IAAA;IAA/C,IAAI;IAAE,OAAO;EACpB,mBAAoC,OAAO,CAAnC,GAAG;IAAH,GAAG,6BAAG,KAAK;IAAA,eAAiB,OAAO,CAAtB,GAAG;IAAH,GAAG,6BAAG,IAAI;EAC/B,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC;EAMjD,IAAM,cAAc,GAAG,IAAA,kBAAW,EAChC;IAAA,OACE,qBAAQ,gDAAI,KAAK,EAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAI;MACnC,IAAI,SAAS,CAAC,OAAO,EAAE;QACrB,OAAO,CAAC,QAAQ,CAAC;MAClB;IACH,CAAC,CAAC;EAAA,GACJ,CAAC,IAAI,CAAC,CACP;EAED,IAAM,cAAc,GAAG,IAAA,kBAAW,EAChC;IAAA,OACE,qBAAQ,gDAAI,KAAK,EAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAI;MACnC,IAAI,SAAS,CAAC,OAAO,EAAE;QACrB,OAAO,CAAC,QAAQ,CAAC;MAClB;IACH,CAAC,CAAC;EAAA,GACJ,CAAC,IAAI,CAAC,CACP;EAED,IAAA,gBAAS,EAAC,YAAK;IACb,IAAI,GAAG,EAAE;MACP,cAAc,EAAE;IACjB;IAED,IAAI,CAAC,GAAG,IAAI,GAAG,EAAE;MACf,cAAc,EAAE;IACjB;EACH,CAAC,EAAE,CAAC,GAAG,EAAE,cAAc,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;EAE9C,IAAA,gBAAS,EAAC,YAAK;IACb,SAAS,CAAC,OAAO,GAAG,IAAI;IACxB,OAAO,YAAK;MACV,SAAS,CAAC,OAAO,GAAG,KAAK;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAAC,IAAI,EAAE,cAAc,EAAE,cAAc,CAAC;AAC/C","sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\nimport { askAsync, getAsync } from './Permissions';\nimport { PermissionResponse, PermissionType } from './Permissions.types';\n\n/**\n * Get or ask permission for protected functionality within the app.\n * It returns the permission response after fetching or asking it.\n * The hook fetches the permissions when rendered, by default.\n * To ask the user permission, use the `askPermission` callback or `ask` option.\n *\n * @see https://docs.expo.dev/versions/latest/sdk/permissions/\n * @example\n * ```tsx\n * const [permission, askPermission, getPermission] = usePermissions(Permissions.CAMERA);\n *\n * return permission?.granted\n *   ? <Camera ... />\n *   : <Button onPress={askPermission} />;\n * ```\n */\nexport function usePermissions(\n  type: PermissionType | PermissionType[],\n  options: PermissionsOptions = {}\n): [PermissionResponse | undefined, () => Promise<void>, () => Promise<void>] {\n  const isMounted = useRef(true);\n  const [data, setData] = useState<PermissionResponse>();\n  const { ask = false, get = true } = options;\n  const types = Array.isArray(type) ? type : [type];\n\n  // note: its intentional to listen to `type`, not `types`.\n  // when `type` is casted to an array, it possible creates a new one on every render.\n  // to prevent unnecessary function instances we need to listen to the \"raw\" value.\n\n  const askPermissions = useCallback(\n    () =>\n      askAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  const getPermissions = useCallback(\n    () =>\n      getAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  useEffect(() => {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [data, askPermissions, getPermissions];\n}\n\nexport interface PermissionsOptions {\n  /** If it should ask the permissions when mounted, defaults to `false` */\n  ask?: boolean;\n  /** If it should fetch information about the permissions when mounted, defaults to `true` */\n  get?: boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}