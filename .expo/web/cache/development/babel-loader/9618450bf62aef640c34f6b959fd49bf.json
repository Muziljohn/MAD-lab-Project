{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n    var _StyleSheet$flatten = StyleSheet.flatten(options.headerStyle || {}),\n      _StyleSheet$flatten$h = _StyleSheet$flatten.height,\n      height = _StyleSheet$flatten$h === void 0 ? previous[curr.key] : _StyleSheet$flatten$h;\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n    var _options$headerStatus = options.headerStatusBarHeight,\n      headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    _ref2$gestureDirectio = _ref2.gestureDirection,\n    gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n  return getDistanceForDirection(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  _createClass(CardStack, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref3 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref3.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, {})\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref4) {\n      var route = _ref4.route,\n        height = _ref4.height;\n      _this.setState(function (_ref5) {\n        var headerHeights = _ref5.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    var _Dimensions$get = Dimensions.get('window'),\n      _Dimensions$get$heigh = _Dimensions$get.height,\n      _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n      _Dimensions$get$width = _Dimensions$get.width,\n      _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        mode = _this$props.mode,\n        insets = _this$props.insets,\n        descriptors = _this$props.descriptors,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        getPreviousRoute = _this$props.getPreviousRoute,\n        getGesturesEnabled = _this$props.getGesturesEnabled,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        headerMode = _this$props.headerMode,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onPageChangeStart = _this$props.onPageChangeStart,\n        onPageChangeConfirm = _this$props.onPageChangeConfirm,\n        onPageChangeCancel = _this$props.onPageChangeCancel;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n        _ref6$top = _ref6.top,\n        top = _ref6$top === void 0 ? insets.top : _ref6$top,\n        _ref6$right = _ref6.right,\n        right = _ref6$right === void 0 ? insets.right : _ref6$right,\n        _ref6$bottom = _ref6.bottom,\n        bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n        _ref6$left = _ref6.left,\n        left = _ref6$left === void 0 ? insets.left : _ref6$left;\n      var isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n      return React.createElement(React.Fragment, null, React.createElement(MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1;\n        var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n          safeAreaInsets = _ref7.safeAreaInsets,\n          headerShown = _ref7.headerShown,\n          headerTransparent = _ref7.headerTransparent,\n          cardShadowEnabled = _ref7.cardShadowEnabled,\n          cardOverlayEnabled = _ref7.cardOverlayEnabled,\n          cardOverlay = _ref7.cardOverlay,\n          cardStyle = _ref7.cardStyle,\n          animationEnabled = _ref7.animationEnabled,\n          gestureResponseDistance = _ref7.gestureResponseDistance,\n          gestureVelocityImpact = _ref7.gestureVelocityImpact,\n          _ref7$gestureDirectio = _ref7.gestureDirection,\n          gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n          _ref7$transitionSpec = _ref7.transitionSpec,\n          transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n          _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n          cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n          _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n          headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n          if (nextScene) {\n            var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n              _animationEnabled = _ref8.animationEnabled,\n              _ref8$gestureDirectio = _ref8.gestureDirection,\n              _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n              _ref8$transitionSpec = _ref8.transitionSpec,\n              _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n              _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n              _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n              _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n              _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n        var _ref9 = safeAreaInsets || {},\n          _ref9$top = _ref9.top,\n          safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n          _ref9$right = _ref9.right,\n          safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n          _ref9$bottom = _ref9.bottom,\n          safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n          _ref9$left = _ref9.left,\n          safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n        var previousRoute = getPreviousRoute({\n          route: scene.route\n        });\n        var previousScene = scenes[index - 1];\n        if (previousRoute) {\n          for (var j = index - 1; j >= 0; j--) {\n            var s = scenes[j];\n            if (s && s.route.key === previousRoute.key) {\n              previousScene = s;\n              break;\n            }\n          }\n        }\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          previousScene: previousScene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeights[route.key],\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousRoute: getPreviousRoute,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          headerTransparent: headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), headerMode === 'float' ? renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousRoute: getPreviousRoute,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: styles.floating\n      }) : null);\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["React","MaybeScreenContainer","MaybeScreen","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","FALLBACK_DESCRIPTOR","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","height","StyleSheet","flatten","headerStyle","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","Dimensions","get","e","nativeEvent","setState","previousHeight","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","isScreensEnabled","Platform","OS","styles","container","handleLayout","focused","isScreenActive","extrapolate","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","previousScene","j","s","absoluteFill","handleHeaderLayout","getFocusedRoute","onContentHeightChange","styleInterpolator","style","floating","create","flex","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            const isScreenActive = scene.progress.next\n              ? scene.progress.next.interpolate({\n                  inputRange: [0, 1 - EPSILON, 1],\n                  outputRange: [1, 1, 0],\n                  extrapolate: 'clamp',\n                })\n              : 1;\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const previousRoute = getPreviousRoute({ route: scene.route });\n\n            let previousScene = scenes[index - 1];\n\n            if (previousRoute) {\n              // The previous scene will be shortly before the current scene in the array\n              // So loop back from current index to avoid looping over the full array\n              for (let j = index - 1; j >= 0; j--) {\n                const s = scenes[j];\n\n                if (s && s.route.key === previousRoute.key) {\n                  previousScene = s;\n                  break;\n                }\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={previousScene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              getPreviousRoute,\n              getFocusedRoute: this.getFocusedRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              gestureDirection:\n                focusedOptions.gestureDirection !== undefined\n                  ? focusedOptions.gestureDirection\n                  : defaultTransitionPreset.gestureDirection,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}