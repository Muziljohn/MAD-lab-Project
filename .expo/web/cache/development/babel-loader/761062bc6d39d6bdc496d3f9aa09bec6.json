{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SceneView;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _BaseNavigationContainer = require(\"./BaseNavigationContainer\");\nvar _NavigationContext = _interopRequireDefault(require(\"./NavigationContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _StaticContainer = _interopRequireDefault(require(\"./StaticContainer\"));\nvar _EnsureSingleNavigator = _interopRequireDefault(require(\"./EnsureSingleNavigator\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction SceneView(_ref) {\n  var screen = _ref.screen,\n    route = _ref.route,\n    navigation = _ref.navigation,\n    getState = _ref.getState,\n    setState = _ref.setState;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var context = React.useMemo(function () {\n    return {\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey\n    };\n  }, [getCurrentState, getKey, route.state, setCurrentState, setKey]);\n  return React.createElement(_NavigationContext.default.Provider, {\n    value: navigation\n  }, React.createElement(_NavigationRouteContext.default.Provider, {\n    value: route\n  }, React.createElement(_BaseNavigationContainer.NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(_EnsureSingleNavigator.default, null, React.createElement(_StaticContainer.default, {\n    name: screen.name,\n    render: screen.component || screen.children,\n    navigation: navigation,\n    route: route\n  }, 'component' in screen && screen.component !== undefined ? React.createElement(screen.component, {\n    navigation: navigation,\n    route: route\n  }) : 'children' in screen && screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)))));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","screen","route","navigation","getState","setState","navigatorKeyRef","React","useRef","getKey","useCallback","current","setKey","key","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","context","useMemo","name","component","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n    }),\n    [getCurrentState, getKey, route.state, setCurrentState, setKey]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <NavigationRouteContext.Provider value={route}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>\n            <StaticContainer\n              name={screen.name}\n              // @ts-ignore\n              render={screen.component || screen.children}\n              navigation={navigation}\n              route={route}\n            >\n              {'component' in screen && screen.component !== undefined ? (\n                // @ts-ignore\n                <screen.component navigation={navigation} route={route} />\n              ) : 'children' in screen && screen.children !== undefined ? (\n                // @ts-ignore\n                screen.children({ navigation, route })\n              ) : null}\n            </StaticContainer>\n          </EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationRouteContext.Provider>\n    </NavigationContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}