{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsFocused;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useSubscription = require(\"use-subscription\");\nvar _useNavigation = _interopRequireDefault(require(\"./useNavigation\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useIsFocused() {\n  var navigation = (0, _useNavigation.default)();\n  var getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  var subscribe = React.useCallback(function (callback) {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return callback(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return callback(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  return (0, _useSubscription.useSubscription)({\n    getCurrentValue: getCurrentValue,\n    subscribe: subscribe\n  });\n}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["useIsFocused","navigation","useNavigation","getCurrentValue","React","useCallback","isFocused","subscribe","callback","unsubscribeFocus","addListener","unsubscribeBlur","useSubscription"],"mappings":";;;;;AAAA;AACA;AACA;AAAA;AAAA;AAOe,SAASA,YAAT,GAAiC;EAC9C,IAAMC,UAAU,GAAGC,IAAAA,sBAAa,GADc;EAG9C,IAAMC,eAAe,GAAGC,KAAK,CAACC,WAAND,CAAkBH,UAAU,CAACK,SAA7BF,EAAwC,CAACH,UAAD,CAAxCG,CAAxB;EACA,IAAMG,SAAS,GAAG,KAAK,CAACF,WAAN,CACfG,UAAAA,QAAD,EAAwC;IACtC,IAAMC,gBAAgB,GAAGR,UAAU,CAACS,WAAXT,CAAuB,OAAvBA,EAAgC;MAAA,OACvDO,QAAQ,CAAC,IAAD,CADeP;IAAAA,EAAzB;IAIA,IAAMU,eAAe,GAAGV,UAAU,CAACS,WAAXT,CAAuB,MAAvBA,EAA+B;MAAA,OACrDO,QAAQ,CAAC,KAAD,CADcP;IAAAA,EAAxB;IAIA,OAAO,YAAM;MACXQ,gBAAgB,EAAA;MAChBE,eAAe,EAAA;IAChB,CAHD;EAID,CAde,EAehB,CAACV,UAAD,CAfgB,CAAlB;EAkBA,OAAOW,IAAAA,gCAAe,EAAC;IACrBT,eADqB,EACrBA,eADqB;IAErBI,SAAAA,EAAAA;EAFqB,CAAD,CAAtB;AAID","sourcesContent":["import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  const subscribe = React.useCallback(\n    (callback: (value: boolean) => void) => {\n      const unsubscribeFocus = navigation.addListener('focus', () =>\n        callback(true)\n      );\n\n      const unsubscribeBlur = navigation.addListener('blur', () =>\n        callback(false)\n      );\n\n      return () => {\n        unsubscribeFocus();\n        unsubscribeBlur();\n      };\n    },\n    [navigation]\n  );\n\n  return useSubscription({\n    getCurrentValue,\n    subscribe,\n  });\n}\n"]},"metadata":{},"sourceType":"script"}