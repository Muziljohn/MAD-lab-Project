{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getDevicePushTokenAsync;\nvar _expoConstants = _interopRequireDefault(require(\"expo-constants\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction getDevicePushTokenAsync() {\n  var data;\n  return _regeneratorRuntime().async(function getDevicePushTokenAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return _regeneratorRuntime().awrap(_subscribeDeviceToPushNotificationsAsync());\n      case 2:\n        data = _context.sent;\n        _expoModulesCore.SyntheticPlatformEmitter.emit('onDevicePushToken', {\n          devicePushToken: data\n        });\n        return _context.abrupt(\"return\", {\n          type: _expoModulesCore.Platform.OS,\n          data: data\n        });\n      case 5:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new _expoModulesCore.CodedError('ERR_UNAVAILABLE', 'The Web Notifications API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new _expoModulesCore.CodedError('ERR_UNAVAILABLE', 'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n  if (Notification.permission !== 'granted') {\n    throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED', \"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");\n  }\n}\nfunction _subscribeDeviceToPushNotificationsAsync() {\n  var _Constants$manifest$n, _Constants$manifest, _Constants$manifest$n2, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2, _Constants$manifest2$3, _Constants$manifest$n3, _Constants$manifest3, _Constants$manifest4, _Constants$manifest4$, _Constants$manifest4$2, _Constants$manifest4$3, _ref, _Constants$manifest$n4, _Constants$manifest5, _Constants$manifest6, _Constants$manifest6$, _Constants$manifest6$2;\n  var vapidPublicKey, serviceWorkerPath, registration, subscribeOptions, pushSubscription, pushSubscriptionJson, subscriptionObject, notificationIcon;\n  return _regeneratorRuntime().async(function _subscribeDeviceToPushNotificationsAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        vapidPublicKey = (_Constants$manifest$n = (_Constants$manifest = _expoConstants.default.manifest) == null ? void 0 : (_Constants$manifest$n2 = _Constants$manifest.notification) == null ? void 0 : _Constants$manifest$n2.vapidPublicKey) != null ? _Constants$manifest$n : (_Constants$manifest2 = _expoConstants.default.manifest2) == null ? void 0 : (_Constants$manifest2$ = _Constants$manifest2.extra) == null ? void 0 : (_Constants$manifest2$2 = _Constants$manifest2$.expoClient) == null ? void 0 : (_Constants$manifest2$3 = _Constants$manifest2$2.notification) == null ? void 0 : _Constants$manifest2$3.vapidPublicKey;\n        if (vapidPublicKey) {\n          _context2.next = 3;\n          break;\n        }\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.');\n      case 3:\n        serviceWorkerPath = (_Constants$manifest$n3 = (_Constants$manifest3 = _expoConstants.default.manifest) == null ? void 0 : _Constants$manifest3.notification.serviceWorkerPath) != null ? _Constants$manifest$n3 : (_Constants$manifest4 = _expoConstants.default.manifest2) == null ? void 0 : (_Constants$manifest4$ = _Constants$manifest4.extra) == null ? void 0 : (_Constants$manifest4$2 = _Constants$manifest4$.expoClient) == null ? void 0 : (_Constants$manifest4$3 = _Constants$manifest4$2.notification) == null ? void 0 : _Constants$manifest4$3.serviceWorkerPath;\n        if (serviceWorkerPath) {\n          _context2.next = 6;\n          break;\n        }\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION', 'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');\n      case 6:\n        guardPermission();\n        registration = null;\n        _context2.prev = 8;\n        _context2.next = 11;\n        return _regeneratorRuntime().awrap(navigator.serviceWorker.register(serviceWorkerPath));\n      case 11:\n        registration = _context2.sent;\n        _context2.next = 17;\n        break;\n      case 14:\n        _context2.prev = 14;\n        _context2.t0 = _context2[\"catch\"](8);\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', \"Could not register this device for push notifications because the service worker (\" + serviceWorkerPath + \") could not be registered: \" + _context2.t0);\n      case 17:\n        _context2.next = 19;\n        return _regeneratorRuntime().awrap(navigator.serviceWorker.ready);\n      case 19:\n        if (registration.active) {\n          _context2.next = 21;\n          break;\n        }\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'Could not register this device for push notifications because the service worker is not active.');\n      case 21:\n        subscribeOptions = {\n          userVisibleOnly: true,\n          applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey)\n        };\n        pushSubscription = null;\n        _context2.prev = 23;\n        _context2.next = 26;\n        return _regeneratorRuntime().awrap(registration.pushManager.subscribe(subscribeOptions));\n      case 26:\n        pushSubscription = _context2.sent;\n        _context2.next = 32;\n        break;\n      case 29:\n        _context2.prev = 29;\n        _context2.t1 = _context2[\"catch\"](23);\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + _context2.t1 + ')');\n      case 32:\n        pushSubscriptionJson = pushSubscription.toJSON();\n        subscriptionObject = {\n          endpoint: pushSubscriptionJson.endpoint,\n          keys: {\n            p256dh: pushSubscriptionJson.keys.p256dh,\n            auth: pushSubscriptionJson.keys.auth\n          }\n        };\n        notificationIcon = ((_ref = (_Constants$manifest$n4 = (_Constants$manifest5 = _expoConstants.default.manifest) == null ? void 0 : _Constants$manifest5.notification) != null ? _Constants$manifest$n4 : (_Constants$manifest6 = _expoConstants.default.manifest2) == null ? void 0 : (_Constants$manifest6$ = _Constants$manifest6.extra) == null ? void 0 : (_Constants$manifest6$2 = _Constants$manifest6$.expoClient) == null ? void 0 : _Constants$manifest6$2.notification) != null ? _ref : {}).icon;\n        _context2.next = 37;\n        return _regeneratorRuntime().awrap(registration.active.postMessage(JSON.stringify({\n          fromExpoWebClient: {\n            notificationIcon: notificationIcon\n          }\n        })));\n      case 37:\n        return _context2.abrupt(\"return\", subscriptionObject);\n      case 38:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, [[8, 14], [23, 29]], Promise);\n}\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}","map":{"version":3,"sources":["../src/getDevicePushTokenAsync.web.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  const vapidPublicKey: string | null =\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest?.notification?.vapidPublicKey ??\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest2?.extra?.expoClient?.notification?.vapidPublicKey;\n  if (!vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  const serviceWorkerPath =\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest?.notification.serviceWorkerPath ??\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest2?.extra?.expoClient?.notification?.serviceWorkerPath;\n  if (!serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(serviceWorkerPath);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      `Could not register this device for push notifications because the service worker (${serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (\n    Constants.manifest?.notification ??\n    Constants.manifest2?.extra?.expoClient?.notification ??\n    {}\n  ).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}