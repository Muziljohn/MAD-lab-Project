{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isSerializable;\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar isSerializableWithoutCircularReference = function isSerializableWithoutCircularReference(o, seen) {\n  if (o === undefined || o === null || typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string') {\n    return true;\n  }\n  if (Object.prototype.toString.call(o) !== '[object Object]' && !Array.isArray(o)) {\n    return false;\n  }\n  if (seen.has(o)) {\n    return false;\n  }\n  seen.add(o);\n  if (Array.isArray(o)) {\n    for (var _iterator = _createForOfIteratorHelperLoose(o), _step; !(_step = _iterator()).done;) {\n      var it = _step.value;\n      if (!isSerializableWithoutCircularReference(it, new Set(seen))) {\n        return false;\n      }\n    }\n  } else {\n    for (var key in o) {\n      if (!isSerializableWithoutCircularReference(o[key], new Set(seen))) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nfunction isSerializable(o) {\n  return isSerializableWithoutCircularReference(o, new Set());\n}","map":{"version":3,"sources":["isSerializable.tsx"],"names":["isSerializableWithoutCircularReference","o","seen","undefined","Object","prototype","toString","call","Array","isArray","has","add","it","Set","key","isSerializable"],"mappings":";;;;;;;AAAA,IAAMA,sCAAsC,GAAG,SAAzCA,sCAAsC,CAC1CC,CAD6C,EAE7CC,IAF6C,EAGjC;EACZ,IACED,CAAC,KAAKE,SAANF,IACAA,CAAC,KAAK,IADNA,IAEA,OAAOA,CAAP,KAAa,SAFbA,IAGA,OAAOA,CAAP,KAAa,QAHbA,IAIA,OAAOA,CAAP,KAAa,QALf,EAME;IACA,OAAO,IAAP;EACD;EAED,IACEG,MAAM,CAACC,SAAPD,CAAiBE,QAAjBF,CAA0BG,IAA1BH,CAA+BH,CAA/BG,CAAAA,KAAsC,iBAAtCA,IACA,CAACI,KAAK,CAACC,OAAND,CAAcP,CAAdO,CAFH,EAGE;IACA,OAAO,KAAP;EACD;EAED,IAAIN,IAAI,CAACQ,GAALR,CAASD,CAATC,CAAJ,EAAiB;IACf,OAAO,KAAP;EACD;EAEDA,IAAI,CAACS,GAALT,CAASD,CAATC,CAAAA;EAEA,IAAIM,KAAK,CAACC,OAAND,CAAcP,CAAdO,CAAJ,EAAsB;IACpB,qDAAiBP,CAAjB,wCAAoB;MAAA,IAATW,EAAX;MACE,IAAI,CAACZ,sCAAsC,CAACY,EAAD,EAAK,IAAIC,GAAJ,CAAaX,IAAb,CAAL,CAA3C,EAAqE;QACnE,OAAO,KAAP;MACD;IACF;EACF,CAND,MAMO;IACL,KAAK,IAAMY,GAAX,IAAkBb,CAAlB,EAAqB;MACnB,IAAI,CAACD,sCAAsC,CAACC,CAAC,CAACa,GAAD,CAAF,EAAS,IAAID,GAAJ,CAAaX,IAAb,CAAT,CAA3C,EAAyE;QACvE,OAAO,KAAP;MACD;IACF;EACF;EAED,OAAO,IAAP;AACD,CA1CD;AA4Ce,SAASa,cAAT,CAAwBd,CAAxB,EAAmD;EAChE,OAAOD,sCAAsC,CAACC,CAAD,EAAI,IAAIY,GAAJ,EAAJ,CAA7C;AACD","sourcesContent":["const isSerializableWithoutCircularReference = (\n  o: { [key: string]: any },\n  seen: Set<any>\n): boolean => {\n  if (\n    o === undefined ||\n    o === null ||\n    typeof o === 'boolean' ||\n    typeof o === 'number' ||\n    typeof o === 'string'\n  ) {\n    return true;\n  }\n\n  if (\n    Object.prototype.toString.call(o) !== '[object Object]' &&\n    !Array.isArray(o)\n  ) {\n    return false;\n  }\n\n  if (seen.has(o)) {\n    return false;\n  }\n\n  seen.add(o);\n\n  if (Array.isArray(o)) {\n    for (const it of o) {\n      if (!isSerializableWithoutCircularReference(it, new Set<any>(seen))) {\n        return false;\n      }\n    }\n  } else {\n    for (const key in o) {\n      if (!isSerializableWithoutCircularReference(o[key], new Set<any>(seen))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nexport default function isSerializable(o: { [key: string]: any }) {\n  return isSerializableWithoutCircularReference(o, new Set<any>());\n}\n"]},"metadata":{},"sourceType":"script"}