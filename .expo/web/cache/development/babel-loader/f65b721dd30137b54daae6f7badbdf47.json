{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeScreens = require(\"react-native-screens\");\nvar _excluded = [\"isVisible\"],\n  _excluded2 = [\"isVisible\", \"children\", \"style\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar FAR_FAR_AWAY = 30000;\nvar ResourceSavingScene = function (_React$Component) {\n  (0, _inherits2.default)(ResourceSavingScene, _React$Component);\n  var _super = _createSuper(ResourceSavingScene);\n  function ResourceSavingScene() {\n    (0, _classCallCheck2.default)(this, ResourceSavingScene);\n    return _super.apply(this, arguments);\n  }\n  (0, _createClass2.default)(ResourceSavingScene, [{\n    key: \"render\",\n    value: function render() {\n      if ((_reactNativeScreens.screensEnabled === null || _reactNativeScreens.screensEnabled === void 0 ? void 0 : (0, _reactNativeScreens.screensEnabled)()) && _reactNative.Platform.OS !== 'web') {\n        var _this$props = this.props,\n          _isVisible = _this$props.isVisible,\n          _rest = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n        if (_reactNativeScreens.shouldUseActivityState) {\n          return React.createElement(_reactNativeScreens.Screen, _extends({\n            activityState: _isVisible ? 2 : 0\n          }, _rest));\n        } else {\n          return React.createElement(_reactNativeScreens.Screen, _extends({\n            active: _isVisible ? 1 : 0\n          }, _rest));\n        }\n      }\n      var _this$props2 = this.props,\n        isVisible = _this$props2.isVisible,\n        children = _this$props2.children,\n        style = _this$props2.style,\n        rest = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);\n      return React.createElement(_reactNative.View, _extends({\n        style: [styles.container, _reactNative.Platform.OS === 'web' ? {\n          display: isVisible ? 'flex' : 'none'\n        } : null, style],\n        collapsable: false,\n        removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? !isVisible : true,\n        pointerEvents: isVisible ? 'auto' : 'none'\n      }, rest), React.createElement(_reactNative.View, {\n        style: isVisible ? styles.attached : styles.detached\n      }, children));\n    }\n  }]);\n  return ResourceSavingScene;\n}(React.Component);\nexports.default = ResourceSavingScene;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","ResourceSavingScene","React","Component","render","Platform","OS","isVisible","rest","props","shouldUseActivityState","children","style","styles","container","display","attached","detached","create","flex","overflow","top"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AAAA;EAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAcA,IAAMA,YAAY,GAAG,KAArB;AAA4B,IAEPC,mBAAN;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACbG,kBAAS;MAEP,IAAI,CAAA,kCAAc,KAAA,IAAd,IAAA,kCAAc,KAAA,KAAA,CAAd,GAAA,KAAA,CAAA,GAAA,IAAA,kCAAc,GAAA,KAAQC,qBAAQ,CAACC,EAATD,KAAgB,KAA1C,EAAiD;QAC/C,kBAA+B,IAAA,CAAKI,KAApC;UAAQF,UAAF,eAAEA,SAAF;UAAgBC,KAAAA;QAEtB,IAAIE,0CAAJ,EAA4B;UAC1B,OAEE,KAAA,CAAA,aAAA,CAAC,0BAAD,EAAA,QAAA,CAAA;YAAQ,aAAa,EAAEH,UAAS,GAAG,CAAH,GAAO;UAAvC,CAAA,EAA8CC,KAA9C,CAAA,CAAA;QAEH,CALD,MAKO;UACL,OAEE,KAAA,CAAA,aAAA,CAAC,0BAAD,EAAA,QAAA,CAAA;YAAQ,MAAM,EAAED,UAAS,GAAG,CAAH,GAAO;UAAhC,CAAA,EAAuCC,KAAvC,CAAA,CAAA;QAEH;MACF;MAED,mBAAgD,IAAA,CAAKC,KAArD;QAAQF,SAAF,gBAAEA,SAAF;QAAaI,QAAb,gBAAaA,QAAb;QAAuBC,KAAvB,gBAAuBA,KAAvB;QAAiCJ,IAAAA;MAEvC,OACE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA,QAAA,CAAA;QACE,KAAK,EAAE,CACLK,MAAM,CAACC,SADF,EAEL,qBAAQ,CAACR,EAAT,KAAgB,KAAhB,GACI;UAAES,OAAO,EAAER,SAAS,GAAG,MAAH,GAAY;QAAhC,CADJ,GAEI,IAJC,EAKLK,KALK,CADT;QAQE,WAAW,EAAE,KARf;QASE,qBAAqB,EAGnBP,qBAAQ,CAACC,EAATD,KAAgB,KAAhBA,GAAwB,CAACE,SAAzBF,GAAqC,IAZzC;QAcE,aAAa,EAAEE,SAAS,GAAG,MAAH,GAAY;MAdtC,CAAA,EAeMC,IAfN,CAAA,EAiBE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA;QAAM,KAAK,EAAED,SAAS,GAAGM,MAAM,CAACG,QAAV,GAAqBH,MAAM,CAACI;MAAlD,CAAA,EACGN,QADH,CAjBF,CADF;IAuBD;EAAA;EAAA;AAAA,EA5C8CT,KAAK,CAACC,SAAxC;AAAA;AA+Cf,IAAMU,MAAM,GAAG,uBAAU,CAACK,MAAX,CAAkB;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/BJ,QAAQ,EAAE;IACRG,IAAI,EAAE;EADE,CALqB;EAQ/BF,QAAQ,EAAE;IACRE,IAAI,EAAE,CADE;IAERE,GAAG,EAAErB;EAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen activityState={isVisible ? 2 : 0} {...rest} />\n        );\n      } else {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen active={isVisible ? 1 : 0} {...rest} />\n        );\n      }\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}