{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateDevicePushTokenAsync = updateDevicePushTokenAsync;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _backoff = require(\"@ide/backoff\");\nvar Application = _interopRequireWildcard(require(\"expo-application\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _ServerRegistrationModule = _interopRequireDefault(require(\"../ServerRegistrationModule\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar updateDevicePushTokenUrl = 'https://exp.host/--/api/v2/push/updateDeviceToken';\nfunction updateDevicePushTokenAsync(signal, token) {\n  var doUpdateDevicePushTokenAsync, shouldTry, retry, retriesCount, initialBackoff, backoffOptions, nextBackoffInterval;\n  return _regeneratorRuntime().async(function updateDevicePushTokenAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        doUpdateDevicePushTokenAsync = function doUpdateDevicePushTokenAsync(retry) {\n          var _await$Promise$all, _await$Promise$all2, development, deviceId, body, response;\n          return _regeneratorRuntime().async(function doUpdateDevicePushTokenAsync$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime().awrap(Promise.all([shouldUseDevelopmentNotificationService(), getDeviceIdAsync()]));\n              case 2:\n                _await$Promise$all = _context.sent;\n                _await$Promise$all2 = (0, _slicedToArray2.default)(_await$Promise$all, 2);\n                development = _await$Promise$all2[0];\n                deviceId = _await$Promise$all2[1];\n                body = {\n                  deviceId: deviceId.toLowerCase(),\n                  development: development,\n                  deviceToken: token.data,\n                  appId: Application.applicationId,\n                  type: getTypeOfToken(token)\n                };\n                _context.prev = 7;\n                _context.next = 10;\n                return _regeneratorRuntime().awrap(fetch(updateDevicePushTokenUrl, {\n                  method: 'POST',\n                  headers: {\n                    'content-type': 'application/json'\n                  },\n                  body: JSON.stringify(body),\n                  signal: signal\n                }));\n              case 10:\n                response = _context.sent;\n                if (response.ok) {\n                  _context.next = 17;\n                  break;\n                }\n                _context.t0 = console;\n                _context.next = 15;\n                return _regeneratorRuntime().awrap(response.text());\n              case 15:\n                _context.t1 = _context.sent;\n                _context.t0.debug.call(_context.t0, '[expo-notifications] Error encountered while updating the device push token with the server:', _context.t1);\n              case 17:\n                if (!response.ok) {\n                  retry();\n                }\n                _context.next = 26;\n                break;\n              case 20:\n                _context.prev = 20;\n                _context.t2 = _context[\"catch\"](7);\n                if (!(_context.t2.name === 'AbortError')) {\n                  _context.next = 24;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 24:\n                console.warn('[expo-notifications] Error thrown while updating the device push token with the server:', _context.t2);\n                retry();\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }, null, null, [[7, 20]], Promise);\n        };\n        shouldTry = true;\n        retry = function retry() {\n          shouldTry = true;\n        };\n        retriesCount = 0;\n        initialBackoff = 500;\n        backoffOptions = {\n          maxBackoff: 2 * 60 * 1000\n        };\n        nextBackoffInterval = (0, _backoff.computeNextBackoffInterval)(initialBackoff, retriesCount, backoffOptions);\n      case 7:\n        if (!(shouldTry && !signal.aborted)) {\n          _context2.next = 18;\n          break;\n        }\n        shouldTry = false;\n        _context2.next = 11;\n        return _regeneratorRuntime().awrap(doUpdateDevicePushTokenAsync(retry));\n      case 11:\n        if (!(shouldTry && !signal.aborted)) {\n          _context2.next = 16;\n          break;\n        }\n        nextBackoffInterval = (0, _backoff.computeNextBackoffInterval)(initialBackoff, retriesCount, backoffOptions);\n        retriesCount += 1;\n        _context2.next = 16;\n        return _regeneratorRuntime().awrap(new Promise(function (resolve) {\n          return setTimeout(resolve, nextBackoffInterval);\n        }));\n      case 16:\n        _context2.next = 7;\n        break;\n      case 18:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction getDeviceIdAsync() {\n  return _regeneratorRuntime().async(function getDeviceIdAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.prev = 0;\n        if (_ServerRegistrationModule.default.getInstallationIdAsync) {\n          _context3.next = 3;\n          break;\n        }\n        throw new _expoModulesCore.UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n      case 3:\n        _context3.next = 5;\n        return _regeneratorRuntime().awrap(_ServerRegistrationModule.default.getInstallationIdAsync());\n      case 5:\n        return _context3.abrupt(\"return\", _context3.sent);\n      case 8:\n        _context3.prev = 8;\n        _context3.t0 = _context3[\"catch\"](0);\n        throw new _expoModulesCore.CodedError('ERR_NOTIFICATIONS_DEVICE_ID', \"Could not fetch the installation ID of the application: \" + _context3.t0 + \".\");\n      case 11:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}\nfunction shouldUseDevelopmentNotificationService() {\n  var notificationServiceEnvironment;\n  return _regeneratorRuntime().async(function shouldUseDevelopmentNotificationService$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        if (!(_expoModulesCore.Platform.OS === 'ios')) {\n          _context4.next = 11;\n          break;\n        }\n        _context4.prev = 1;\n        _context4.next = 4;\n        return _regeneratorRuntime().awrap(Application.getIosPushNotificationServiceEnvironmentAsync());\n      case 4:\n        notificationServiceEnvironment = _context4.sent;\n        if (!(notificationServiceEnvironment === 'development')) {\n          _context4.next = 7;\n          break;\n        }\n        return _context4.abrupt(\"return\", true);\n      case 7:\n        _context4.next = 11;\n        break;\n      case 9:\n        _context4.prev = 9;\n        _context4.t0 = _context4[\"catch\"](1);\n      case 11:\n        return _context4.abrupt(\"return\", false);\n      case 12:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, [[1, 9]], Promise);\n}","map":{"version":3,"sources":["../../src/utils/updateDevicePushTokenAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { computeNextBackoffInterval } from '@ide/backoff';\nimport * as Application from 'expo-application';\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ServerRegistrationModule from '../ServerRegistrationModule';\nimport { DevicePushToken } from '../Tokens.types';\n\nconst updateDevicePushTokenUrl = 'https://exp.host/--/api/v2/push/updateDeviceToken';\n\nexport async function updateDevicePushTokenAsync(signal: AbortSignal, token: DevicePushToken) {\n  const doUpdateDevicePushTokenAsync = async (retry: () => void) => {\n    const [development, deviceId] = await Promise.all([\n      shouldUseDevelopmentNotificationService(),\n      getDeviceIdAsync(),\n    ]);\n    const body = {\n      deviceId: deviceId.toLowerCase(),\n      development,\n      deviceToken: token.data,\n      appId: Application.applicationId,\n      type: getTypeOfToken(token),\n    };\n\n    try {\n      const response = await fetch(updateDevicePushTokenUrl, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(body),\n        signal,\n      });\n\n      // Help debug erroring servers\n      if (!response.ok) {\n        console.debug(\n          '[expo-notifications] Error encountered while updating the device push token with the server:',\n          await response.text()\n        );\n      }\n\n      // Retry if request failed\n      if (!response.ok) {\n        retry();\n      }\n    } catch (e) {\n      // Error returned if the request is aborted should be an 'AbortError'. In\n      // React Native fetch is polyfilled using `whatwg-fetch` which:\n      // - creates `AbortError`s like this\n      //   https://github.com/github/fetch/blob/75d9455d380f365701151f3ac85c5bda4bbbde76/fetch.js#L505\n      // - which creates exceptions like\n      //   https://github.com/github/fetch/blob/75d9455d380f365701151f3ac85c5bda4bbbde76/fetch.js#L490-L494\n      if (e.name === 'AbortError') {\n        // We don't consider AbortError a failure, it's a sign somewhere else the\n        // request is expected to succeed and we don't need this one, so let's\n        // just return.\n        return;\n      }\n\n      console.warn(\n        '[expo-notifications] Error thrown while updating the device push token with the server:',\n        e\n      );\n\n      retry();\n    }\n  };\n\n  let shouldTry = true;\n  const retry = () => {\n    shouldTry = true;\n  };\n\n  let retriesCount = 0;\n  const initialBackoff = 500; // 0.5 s\n  const backoffOptions = {\n    maxBackoff: 2 * 60 * 1000, // 2 minutes\n  };\n  let nextBackoffInterval = computeNextBackoffInterval(\n    initialBackoff,\n    retriesCount,\n    backoffOptions\n  );\n\n  while (shouldTry && !signal.aborted) {\n    // Will be set to true by `retry` if it's called\n    shouldTry = false;\n    await doUpdateDevicePushTokenAsync(retry);\n\n    // Do not wait if we won't retry\n    if (shouldTry && !signal.aborted) {\n      nextBackoffInterval = computeNextBackoffInterval(\n        initialBackoff,\n        retriesCount,\n        backoffOptions\n      );\n      retriesCount += 1;\n      await new Promise((resolve) => setTimeout(resolve, nextBackoffInterval));\n    }\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_DEVICE_ID',\n      `Could not fetch the installation ID of the application: ${e}.`\n    );\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}