{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useOnAction;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useOnAction(_ref) {\n  var router = _ref.router,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    key = _ref.key,\n    listeners = _ref.listeners,\n    routerConfigOptions = _ref.routerConfigOptions;\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n    onActionParent = _React$useContext.onAction,\n    onRouteFocusParent = _React$useContext.onRouteFocus,\n    addActionListenerParent = _React$useContext.addActionListener,\n    trackAction = _React$useContext.trackAction;\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n    visitedNavigators.add(state.key);\n    if (typeof action.target === 'string' && action.target !== state.key) {\n      return false;\n    }\n    var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n    result = result === null && action.target === state.key ? state : result;\n    if (result !== null) {\n      trackAction(action);\n      if (state !== result) {\n        setState(result);\n      }\n      if (onRouteFocusParent !== undefined) {\n        var shouldFocus = router.shouldActionChangeFocus(action);\n        if (shouldFocus && key !== undefined) {\n          onRouteFocusParent(key);\n        }\n      }\n      return true;\n    }\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    for (var i = listeners.length - 1; i >= 0; i--) {\n      var listener = listeners[i];\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    return false;\n  }, [getState, router, onActionParent, trackAction, onRouteFocusParent, setState, key, listeners]);\n  React.useEffect(function () {\n    return addActionListenerParent === null || addActionListenerParent === void 0 ? void 0 : addActionListenerParent(onAction);\n  }, [addActionListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["useOnAction","router","getState","setState","key","listeners","routerConfigOptions","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addActionListener","addActionListenerParent","trackAction","React","useContext","NavigationBuilderContext","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n} from './NavigationBuilderContext';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  listeners: ChildActionListener[];\n  routerConfigOptions: RouterConfigOptions;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  listeners,\n  routerConfigOptions,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addActionListener: addActionListenerParent,\n    trackAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef = React.useRef<RouterConfigOptions>(\n    routerConfigOptions\n  );\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target === 'string' && action.target !== state.key) {\n        return false;\n      }\n\n      let result = router.getStateForAction(\n        state,\n        action,\n        routerConfigOptionsRef.current\n      );\n\n      // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        trackAction(action);\n\n        if (state !== result) {\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        const listener = listeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      getState,\n      router,\n      onActionParent,\n      trackAction,\n      onRouteFocusParent,\n      setState,\n      key,\n      listeners,\n    ]\n  );\n\n  React.useEffect(() => addActionListenerParent?.(onAction), [\n    addActionListenerParent,\n    onAction,\n  ]);\n\n  return onAction;\n}\n"]},"metadata":{},"sourceType":"script"}