{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = HeaderContainer;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _native = require(\"@react-navigation/native\");\nvar _Header = _interopRequireDefault(require(\"./Header\"));\nvar _HeaderStyleInterpolators = require(\"../../TransitionConfigs/HeaderStyleInterpolators\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction HeaderContainer(_ref) {\n  var mode = _ref.mode,\n    scenes = _ref.scenes,\n    layout = _ref.layout,\n    insets = _ref.insets,\n    getFocusedRoute = _ref.getFocusedRoute,\n    getPreviousRoute = _ref.getPreviousRoute,\n    onContentHeightChange = _ref.onContentHeightChange,\n    gestureDirection = _ref.gestureDirection,\n    styleInterpolator = _ref.styleInterpolator,\n    style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  return React.createElement(_reactNative.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n    var options = scene.descriptor.options;\n    var isFocused = focusedRoute.key === scene.route.key;\n    var previousRoute = getPreviousRoute({\n      route: scene.route\n    });\n    var previous;\n    if (previousRoute) {\n      for (var j = i - 1; j >= 0; j--) {\n        var s = self[j];\n        if (s && s.route.key === previousRoute.key) {\n          previous = s;\n          break;\n        }\n      }\n    }\n    var previousScene = self[i - 1];\n    var nextScene = self[i + 1];\n    var isHeaderStatic = previousScene && previousScene.descriptor.options.headerShown === false && !nextScene || nextScene && nextScene.descriptor.options.headerShown === false;\n    var props = {\n      mode: mode,\n      layout: layout,\n      insets: insets,\n      scene: scene,\n      previous: previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? _HeaderStyleInterpolators.forSlideUp : gestureDirection === 'horizontal-inverted' ? _HeaderStyleInterpolators.forSlideRight : _HeaderStyleInterpolators.forSlideLeft : styleInterpolator : _HeaderStyleInterpolators.forNoAnimation\n    };\n    return React.createElement(_native.NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(_native.NavigationRouteContext.Provider, {\n      value: scene.route\n    }, React.createElement(_reactNative.View, {\n      onLayout: onContentHeightChange ? function (e) {\n        return onContentHeightChange({\n          route: scene.route,\n          height: e.nativeEvent.layout.height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || options.headerTransparent ? styles.header : null\n    }, options.headerShown !== false ? options.header !== undefined ? options.header(props) : React.createElement(_Header.default, props) : null)));\n  }));\n}\nvar styles = _reactNative.StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["HeaderContainer.tsx"],"names":["HeaderContainer","mode","scenes","layout","insets","getFocusedRoute","getPreviousRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","slice","map","scene","i","self","length","options","descriptor","isFocused","key","route","previousRoute","previous","j","s","previousScene","nextScene","isHeaderStatic","headerShown","props","navigation","forSlideUp","forSlideRight","forSlideLeft","forNoAnimation","e","height","nativeEvent","undefined","headerTransparent","styles","header","create","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getFocusedRoute,\n  getPreviousRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { options } = scene.descriptor;\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previousRoute = getPreviousRoute({ route: scene.route });\n\n        let previous;\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = i - 1; j >= 0; j--) {\n            const s = self[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previous = s;\n              break;\n            }\n          }\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n        const isHeaderStatic =\n          (previousScene &&\n            previousScene.descriptor.options.headerShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          (nextScene && nextScene.descriptor.options.headerShown === false);\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) =>\n                        onContentHeightChange({\n                          route: scene.route,\n                          height: e.nativeEvent.layout.height,\n                        })\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || options.headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {options.headerShown !== false ? (\n                  options.header !== undefined ? (\n                    options.header(props)\n                  ) : (\n                    <Header {...props} />\n                  )\n                ) : null}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}