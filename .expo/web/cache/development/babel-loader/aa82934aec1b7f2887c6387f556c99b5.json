{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _expoModulesCore = require(\"expo-modules-core\");\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction convertPermissionStatus(status) {\n  switch (status) {\n    case 'granted':\n      return {\n        status: _expoModulesCore.PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true\n      };\n    case 'denied':\n      return {\n        status: _expoModulesCore.PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false\n      };\n    default:\n      return {\n        status: _expoModulesCore.PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false\n      };\n  }\n}\nfunction resolvePermissionAsync(_ref) {\n  var _navigator, _navigator$permission;\n  var shouldAsk, _window, _window$Notification, Notification, status, query;\n  return _regeneratorRuntime().async(function resolvePermissionAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        shouldAsk = _ref.shouldAsk;\n        if (_expoModulesCore.Platform.isDOMAvailable) {\n          _context.next = 3;\n          break;\n        }\n        return _context.abrupt(\"return\", convertPermissionStatus('denied'));\n      case 3:\n        _window = window, _window$Notification = _window.Notification, Notification = _window$Notification === void 0 ? {} : _window$Notification;\n        if (!(typeof Notification.requestPermission !== 'undefined')) {\n          _context.next = 13;\n          break;\n        }\n        status = Notification.permission;\n        if (!shouldAsk) {\n          _context.next = 10;\n          break;\n        }\n        _context.next = 9;\n        return _regeneratorRuntime().awrap(new Promise(function (resolve, reject) {\n          var _Notification$request, _Notification$request2;\n          var resolved = false;\n          function resolveOnce(status) {\n            if (!resolved) {\n              resolved = true;\n              resolve(status);\n            }\n          }\n          (_Notification$request = Notification.requestPermission(resolveOnce)) == null ? void 0 : (_Notification$request2 = _Notification$request.then(resolveOnce)) == null ? void 0 : _Notification$request2.catch(reject);\n        }));\n      case 9:\n        status = _context.sent;\n      case 10:\n        return _context.abrupt(\"return\", convertPermissionStatus(status));\n      case 13:\n        if (!(typeof navigator !== 'undefined' && (_navigator = navigator) != null && (_navigator$permission = _navigator.permissions) != null && _navigator$permission.query)) {\n          _context.next = 18;\n          break;\n        }\n        _context.next = 16;\n        return _regeneratorRuntime().awrap(navigator.permissions.query({\n          name: 'notifications'\n        }));\n      case 16:\n        query = _context.sent;\n        return _context.abrupt(\"return\", convertPermissionStatus(query.state));\n      case 18:\n        return _context.abrupt(\"return\", convertPermissionStatus('denied'));\n      case 19:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nvar _default = {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getPermissionsAsync: function getPermissionsAsync() {\n    return _regeneratorRuntime().async(function getPermissionsAsync$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", resolvePermissionAsync({\n            shouldAsk: false\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, null, null, null, Promise);\n  },\n  requestPermissionsAsync: function requestPermissionsAsync(request) {\n    return _regeneratorRuntime().async(function requestPermissionsAsync$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", resolvePermissionAsync({\n            shouldAsk: true\n          }));\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, null, null, null, Promise);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../src/NotificationPermissionsModule.ts"],"names":[],"mappings":";;;;AAAA;AAA+D;AAQ/D,SAAS,uBAAuB,CAC9B,MAA0C,EAAA;EAE1C,QAAQ,MAAM;IACZ,KAAK,SAAS;MACZ,OAAO;QACL,MAAM,EAAE,iCAAgB,CAAC,OAAO;QAChC,OAAO,EAAE,OAAO;QAChB,WAAW,EAAE,KAAK;QAClB,OAAO,EAAE;OACV;IACH,KAAK,QAAQ;MACX,OAAO;QACL,MAAM,EAAE,iCAAgB,CAAC,MAAM;QAC/B,OAAO,EAAE,OAAO;QAChB,WAAW,EAAE,KAAK;QAClB,OAAO,EAAE;OACV;IACH;MACE,OAAO;QACL,MAAM,EAAE,iCAAgB,CAAC,YAAY;QACrC,OAAO,EAAE,OAAO;QAChB,WAAW,EAAE,IAAI;QACjB,OAAO,EAAE;OACV;EAAC;AAER;AAEA,SAAe,sBAAsB;EAAA;EAAA;EAAA;IAAA;MAAA;QACnC,SAAS,QAAT,SAAS;QAAA,IAIJ,yBAAQ,CAAC,cAAc;UAAA;UAAA;QAAA;QAAA,iCACnB,uBAAuB,CAAC,QAAQ,CAAC;MAAA;QAAA,UAGZ,MAAa,iCAAnC,YAAY,EAAZ,YAAY,qCAAG,CAAA,CAAE;QAAA,MACrB,OAAO,YAAY,CAAC,iBAAiB,KAAK,WAAW;UAAA;UAAA;QAAA;QACnD,MAAM,GAAG,YAAY,CAAC,UAAU;QAAA,KAChC,SAAS;UAAA;UAAA;QAAA;QAAA;QAAA,mCACI,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAI;UAAA;UAC7C,IAAI,QAAQ,GAAG,KAAK;UACpB,SAAS,WAAW,CAAC,MAAc,EAAA;YACjC,IAAI,CAAC,QAAQ,EAAE;cACb,QAAQ,GAAG,IAAI;cACf,OAAO,CAAC,MAAM,CAAC;YAChB;UACH;UAEA,yBAAA,YAAY,CAAC,iBAAiB,CAAC,WAAW,CAAC,+CAA3C,sBAA6C,IAAI,CAAC,WAAW,CAAC,qBAA9D,uBAAgE,KAAK,CAAC,MAAM,CAAC;QAC/E,CAAC,CAAC;MAAA;QAVF,MAAM;MAAA;QAAA,iCAYD,uBAAuB,CAAC,MAAM,CAAC;MAAA;QAAA,MAC7B,OAAO,SAAS,KAAK,WAAW,kBAAI,SAAS,sCAAT,WAAW,WAAW,aAAtB,sBAAwB,KAAK;UAAA;UAAA;QAAA;QAAA;QAAA,mCAEtD,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC;UAAE,IAAI,EAAE;QAAe,CAAE,CAAC;MAAA;QAApE,KAAK;QAAA,iCACJ,uBAAuB,CAAC,KAAK,CAAC,KAAK,CAAC;MAAA;QAAA,iCAGtC,uBAAuB,CAAC,QAAQ,CAAC;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA;AACzC,eAEc;EACb,WAAW,EAAE,uBAAK,CAAE,CAAC;EACrB,eAAe,EAAE,2BAAK,CAAE,CAAC;EACnB,mBAAmB;IAAA;MAAA;QAAA;UAAA,kCAChB,sBAAsB,CAAC;YAAE,SAAS,EAAE;UAAK,CAAE,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;EAE/C,uBAAuB,mCAC3B,OAA6C;IAAA;MAAA;QAAA;UAAA,kCAEtC,sBAAsB,CAAC;YAAE,SAAS,EAAE;UAAI,CAAE,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;CAEpB;AAAA","sourcesContent":["import { PermissionStatus, Platform } from 'expo-modules-core';\n\nimport {\n  NativeNotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport { NotificationPermissionsModule } from './NotificationPermissionsModule.types';\n\nfunction convertPermissionStatus(\n  status?: NotificationPermission | 'prompt'\n): NotificationPermissionsStatus {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true,\n      };\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false,\n      };\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n  }\n}\n\nasync function resolvePermissionAsync({\n  shouldAsk,\n}: {\n  shouldAsk: boolean;\n}): Promise<NotificationPermissionsStatus> {\n  if (!Platform.isDOMAvailable) {\n    return convertPermissionStatus('denied');\n  }\n\n  const { Notification = {} } = window as any;\n  if (typeof Notification.requestPermission !== 'undefined') {\n    let status = Notification.permission;\n    if (shouldAsk) {\n      status = await new Promise((resolve, reject) => {\n        let resolved = false;\n        function resolveOnce(status: string) {\n          if (!resolved) {\n            resolved = true;\n            resolve(status);\n          }\n        }\n        // Some browsers require a callback argument and some return a Promise\n        Notification.requestPermission(resolveOnce)?.then(resolveOnce)?.catch(reject);\n      });\n    }\n    return convertPermissionStatus(status);\n  } else if (typeof navigator !== 'undefined' && navigator?.permissions?.query) {\n    // TODO(Bacon): Support `push` in the future when it's stable.\n    const query = await navigator.permissions.query({ name: 'notifications' });\n    return convertPermissionStatus(query.state);\n  }\n  // Platforms like iOS Safari don't support Notifications so return denied.\n  return convertPermissionStatus('denied');\n}\n\nexport default {\n  addListener: () => {},\n  removeListeners: () => {},\n  async getPermissionsAsync(): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: false });\n  },\n  async requestPermissionsAsync(\n    request: NativeNotificationPermissionsRequest\n  ): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: true });\n  },\n} as NotificationPermissionsModule;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}