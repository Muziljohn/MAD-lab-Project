{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nexport default function useOnGetState(_ref) {\n  var getStateForRoute = _ref.getStateForRoute,\n    getState = _ref.getState;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    addStateGetter = _React$useContext.addStateGetter;\n  var route = React.useContext(NavigationRouteContext);\n  var key = route ? route.key : 'root';\n  var getRehydratedState = React.useCallback(function () {\n    var state = getState();\n    return _objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (route) {\n        return _objectSpread(_objectSpread({}, route), {}, {\n          state: getStateForRoute(route.key)\n        });\n      })\n    });\n  }, [getState, getStateForRoute]);\n  React.useEffect(function () {\n    return addStateGetter === null || addStateGetter === void 0 ? void 0 : addStateGetter(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}","map":{"version":3,"sources":["useOnGetState.tsx"],"names":["React","NavigationBuilderContext","NavigationRouteContext","useOnGetState","getStateForRoute","getState","addStateGetter","useContext","route","key","getRehydratedState","useCallback","state","routes","map","useEffect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AACA,OAAOC,sBAAP;AAEA,eAAe,SAASC,aAAT,OAMZ;EAAA,IALDC,gBADoC,QACpCA,gBADoC;IAEpCC,QAAAA,QAAAA,QAAAA;EAAAA,wBAK2BL,KAAK,CAACO,UAANP,CAAiBC,wBAAjBD,CAA3B;IAAQM,cAAAA,qBAAAA,cAAAA;EACR,IAAME,KAAK,GAAGR,KAAK,CAACO,UAANP,CAAiBE,sBAAjBF,CAAd;EACA,IAAMS,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAACC,GAAT,GAAe,MAAhC;EAEA,IAAMC,kBAAkB,GAAG,KAAK,CAACC,WAAN,CAAkB,YAAM;IACjD,IAAMC,KAAK,GAAGP,QAAQ,EAAtB;IACA,OAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACKO,KADL,CAAA,EAAA,CAAA,CAAA,EAAA;MAEEC,MAAM,EAAE,KAAK,CAACA,MAAN,CAAaC,GAAb,CAAkBN,UAAAA,KAAD;QAAA,OAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACpBA,KADoB,CAAA,EAAA,CAAA,CAAA,EAAA;UAEvBI,KAAK,EAAER,gBAAgB,CAACI,KAAK,CAACC,GAAP;QAFA,CAAA,CAAjB;MAAA;IAFV,CAAA,CAAA;EAOD,CAT0B,EASxB,CAACJ,QAAD,EAAWD,gBAAX,CATwB,CAA3B;EAWAJ,KAAK,CAACe,SAANf,CAAgB,YAAM;IACpB,OAAOM,cAAP,KAAA,IAAA,IAAOA,cAAP,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,cAAc,CAAGG,GAAH,EAAQC,kBAAR,CAArB;EACD,CAFDV,EAEG,CAACM,cAAD,EAAiBI,kBAAjB,EAAqCD,GAArC,CAFHT,CAAAA;AAGD","sourcesContent":["import * as React from 'react';\nimport { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\nexport default function useOnGetState({\n  getStateForRoute,\n  getState,\n}: {\n  getStateForRoute: (routeName: string) => NavigationState | undefined;\n  getState: () => NavigationState;\n}) {\n  const { addStateGetter } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n    return {\n      ...state,\n      routes: state.routes.map((route) => ({\n        ...route,\n        state: getStateForRoute(route.key),\n      })),\n    };\n  }, [getState, getStateForRoute]);\n\n  React.useEffect(() => {\n    return addStateGetter?.(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module"}