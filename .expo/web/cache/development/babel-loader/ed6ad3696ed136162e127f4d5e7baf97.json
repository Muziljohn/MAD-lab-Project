{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleGeocodeAsync = googleGeocodeAsync;\nexports.googleReverseGeocodeAsync = googleReverseGeocodeAsync;\nexports.setGoogleApiKey = setGoogleApiKey;\nvar _expoModulesCore = require(\"expo-modules-core\");\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nvar googleApiKey;\nfunction setGoogleApiKey(apiKey) {\n  googleApiKey = apiKey;\n}\nfunction googleGeocodeAsync(address) {\n  var result;\n  return _regeneratorRuntime().async(function googleGeocodeAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        assertGoogleApiKey();\n        _context.next = 3;\n        return _regeneratorRuntime().awrap(requestGoogleApiAsync({\n          address: address\n        }));\n      case 3:\n        result = _context.sent;\n        if (!(result.status === 'ZERO_RESULTS')) {\n          _context.next = 6;\n          break;\n        }\n        return _context.abrupt(\"return\", []);\n      case 6:\n        assertGeocodeResults(result);\n        return _context.abrupt(\"return\", result.results.map(geocodingResultToLocation));\n      case 8:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction googleReverseGeocodeAsync(options) {\n  var result;\n  return _regeneratorRuntime().async(function googleReverseGeocodeAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        assertGoogleApiKey();\n        _context2.next = 3;\n        return _regeneratorRuntime().awrap(requestGoogleApiAsync({\n          latlng: options.latitude + \",\" + options.longitude\n        }));\n      case 3:\n        result = _context2.sent;\n        if (!(result.status === 'ZERO_RESULTS')) {\n          _context2.next = 6;\n          break;\n        }\n        return _context2.abrupt(\"return\", []);\n      case 6:\n        assertGeocodeResults(result);\n        return _context2.abrupt(\"return\", result.results.map(reverseGeocodingResultToAddress));\n      case 8:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction assertGeocodeResults(resultObject) {\n  var status = resultObject.status,\n    error_message = resultObject.error_message;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new _expoModulesCore.CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new _expoModulesCore.CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');\n    }\n    throw new _expoModulesCore.CodedError(status, \"An error occurred during geocoding.\");\n  }\n}\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error('Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.');\n  }\n}\nfunction requestGoogleApiAsync(params) {\n  var query, result;\n  return _regeneratorRuntime().async(function requestGoogleApiAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        query = Object.entries(params).map(function (entry) {\n          return entry[0] + \"=\" + encodeURI(entry[1]);\n        }).join('&');\n        _context3.next = 3;\n        return _regeneratorRuntime().awrap(fetch(GOOGLE_API_URL + \"?key=\" + googleApiKey + \"&\" + query));\n      case 3:\n        result = _context3.sent;\n        _context3.next = 6;\n        return _regeneratorRuntime().awrap(result.json());\n      case 6:\n        return _context3.abrupt(\"return\", _context3.sent);\n      case 7:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction geocodingResultToLocation(result) {\n  var location = result.geometry.location;\n  return {\n    latitude: location.lat,\n    longitude: location.lng\n  };\n}\nfunction reverseGeocodingResultToAddress(result) {\n  var address = {};\n  for (var _iterator = _createForOfIteratorHelperLoose(result.address_components), _step; !(_step = _iterator()).done;) {\n    var _ref = _step.value;\n    var long_name = _ref.long_name;\n    var short_name = _ref.short_name;\n    var types = _ref.types;\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n    if (types.includes('street_number')) {\n      address.streetNumber = long_name;\n      continue;\n    }\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n  return address;\n}","map":{"version":3,"sources":["../src/LocationGoogleGeocoding.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { LocationGeocodedAddress, LocationGeocodedLocation } from './Location.types';\n\nconst GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nlet googleApiKey;\n\ntype GoogleApiGeocodingAddressComponent = {\n  long_name: string;\n  short_name: string;\n  types: string[];\n};\n\ntype GoogleApiGeocodingResult = {\n  address_components: GoogleApiGeocodingAddressComponent[];\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n  };\n};\n\ntype GoogleApiGeocodingResponse = {\n  results: GoogleApiGeocodingResult[];\n  status: string;\n};\n\n// @needsAudit\n/**\n * Sets a Google API Key for using Google Maps Geocoding API which is used by default on Web\n * platform and can be enabled through `useGoogleMaps` option of `geocodeAsync` and `reverseGeocodeAsync`\n * methods. It might be useful for Android devices that do not have Google Play Services, hence no\n * Geocoder Service.\n * @param apiKey Google API key obtained from Google API Console. This API key must have `Geocoding API`\n * enabled, otherwise your geocoding requests will be denied.\n */\nexport function setGoogleApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nexport async function googleGeocodeAsync(address: string): Promise<LocationGeocodedLocation[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({ address });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(geocodingResultToLocation);\n}\n\nexport async function googleReverseGeocodeAsync(options: {\n  latitude: number;\n  longitude: number;\n}): Promise<LocationGeocodedAddress[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({\n    latlng: `${options.latitude},${options.longitude}`,\n  });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(reverseGeocodingResultToAddress);\n}\n\n// https://developers.google.com/maps/documentation/geocoding/intro\nfunction assertGeocodeResults(resultObject: any): void {\n  const { status, error_message } = resultObject;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(\n        status,\n        'the request could not be processed due to a server error. The request may succeed if you try again.'\n      );\n    }\n    throw new CodedError(status, `An error occurred during geocoding.`);\n  }\n}\n\n/**\n * Makes sure the Google API key is set.\n */\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error(\n      'Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.'\n    );\n  }\n}\n\n/**\n * Generic and handy method for sending requests to Google Maps API endpoint.\n */\nasync function requestGoogleApiAsync(\n  params: { address: string } | { latlng: string }\n): Promise<GoogleApiGeocodingResponse> {\n  const query = Object.entries(params)\n    .map((entry) => `${entry[0]}=${encodeURI(entry[1])}`)\n    .join('&');\n  const result = await fetch(`${GOOGLE_API_URL}?key=${googleApiKey}&${query}`);\n  return await result.json();\n}\n\n/**\n * Converts Google's result to the location object.\n */\nfunction geocodingResultToLocation(result: GoogleApiGeocodingResult): LocationGeocodedLocation {\n  const { location } = result.geometry;\n  return {\n    latitude: location.lat,\n    longitude: location.lng,\n  };\n}\n\n/**\n * Converts Google's result to address object.\n */\nfunction reverseGeocodingResultToAddress(\n  result: GoogleApiGeocodingResult\n): LocationGeocodedAddress {\n  const address: Partial<LocationGeocodedAddress> = {};\n\n  for (const { long_name, short_name, types } of result.address_components) {\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n    if (types.includes('street_number')) {\n      address.streetNumber = long_name;\n      continue;\n    }\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n  return address as LocationGeocodedAddress;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}