{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _native = require(\"@react-navigation/native\");\nvar _reactNativeScreens = require(\"react-native-screens\");\nvar _SafeAreaProviderCompat = _interopRequireDefault(require(\"./SafeAreaProviderCompat\"));\nvar _ResourceSavingScene = _interopRequireDefault(require(\"./ResourceSavingScene\"));\nvar _BottomTabBar = _interopRequireDefault(require(\"./BottomTabBar\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction SceneContent(_ref) {\n  var isFocused = _ref.isFocused,\n    children = _ref.children,\n    style = _ref.style;\n  var _useTheme = (0, _native.useTheme)(),\n    colors = _useTheme.colors;\n  return React.createElement(_reactNative.View, {\n    accessibilityElementsHidden: !isFocused,\n    importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }, style]\n  }, children);\n}\nvar BottomTabView = function (_React$Component) {\n  (0, _inherits2.default)(BottomTabView, _React$Component);\n  var _super = _createSuper(BottomTabView);\n  function BottomTabView() {\n    var _this;\n    (0, _classCallCheck2.default)(this, BottomTabView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      loaded: [_this.props.state.routes[_this.props.state.index].key]\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderTabBar\", function () {\n      var _this$props = _this.props,\n        _this$props$tabBar = _this$props.tabBar,\n        tabBar = _this$props$tabBar === void 0 ? function (props) {\n          return React.createElement(_BottomTabBar.default, props);\n        } : _this$props$tabBar,\n        tabBarOptions = _this$props.tabBarOptions,\n        state = _this$props.state,\n        navigation = _this$props.navigation,\n        descriptors = _this$props.descriptors;\n      return tabBar(_objectSpread(_objectSpread({}, tabBarOptions), {}, {\n        state: state,\n        descriptors: descriptors,\n        navigation: navigation\n      }));\n    });\n    return _this;\n  }\n  (0, _createClass2.default)(BottomTabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        state = _this$props2.state,\n        descriptors = _this$props2.descriptors,\n        navigation = _this$props2.navigation,\n        lazy = _this$props2.lazy,\n        _this$props2$detachIn = _this$props2.detachInactiveScreens,\n        detachInactiveScreens = _this$props2$detachIn === void 0 ? true : _this$props2$detachIn,\n        sceneContainerStyle = _this$props2.sceneContainerStyle;\n      var routes = state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(_native.NavigationHelpersContext.Provider, {\n        value: navigation\n      }, React.createElement(_SafeAreaProviderCompat.default, null, React.createElement(_reactNative.View, {\n        style: styles.container\n      }, React.createElement(_reactNativeScreens.ScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.pages\n      }, routes.map(function (route, index) {\n        var descriptor = descriptors[route.key];\n        var unmountOnBlur = descriptor.options.unmountOnBlur;\n        var isFocused = state.index === index;\n        if (unmountOnBlur && !isFocused) {\n          return null;\n        }\n        if (lazy && !loaded.includes(route.key) && !isFocused) {\n          return null;\n        }\n        return React.createElement(_ResourceSavingScene.default, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          isVisible: isFocused,\n          enabled: detachInactiveScreens\n        }, React.createElement(SceneContent, {\n          isFocused: isFocused,\n          style: sceneContainerStyle\n        }, descriptor.render()));\n      })), this.renderTabBar())));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n      return {\n        loaded: prevState.loaded.includes(focusedRouteKey) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [focusedRouteKey])\n      };\n    }\n  }]);\n  return BottomTabView;\n}(React.Component);\nexports.default = BottomTabView;\n_defineProperty(BottomTabView, \"defaultProps\", {\n  lazy: true\n});\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  },\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["BottomTabView.tsx"],"names":["SceneContent","isFocused","children","style","colors","useTheme","styles","content","backgroundColor","background","BottomTabView","React","Component","lazy","nextProps","prevState","focusedRouteKey","state","routes","index","key","loaded","includes","props","tabBar","tabBarOptions","navigation","descriptors","render","detachInactiveScreens","sceneContainerStyle","container","pages","map","route","descriptor","unmountOnBlur","options","StyleSheet","absoluteFill","renderTabBar","create","flex","overflow"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAkBA,SAASA,YAAT,OAQG;EAAA,IAPDC,SADoB,QACpBA,SADoB;IAEpBC,QAFoB,QAEpBA,QAFoB;IAGpBC,KAAAA,QAAAA,KAAAA;EAMA,gBAAmBE,IAAAA,gBAAQ,GAA3B;IAAQD,MAAAA,aAAAA,MAAAA;EAER,OACE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA;IACE,2BAA2B,EAAE,CAACH,SADhC;IAEE,yBAAyB,EAAEA,SAAS,GAAG,MAAH,GAAY,qBAFlD;IAGE,KAAK,EAAE,CAACK,MAAM,CAACC,OAAR,EAAiB;MAAEC,eAAe,EAAEJ,MAAM,CAACK;IAA1B,CAAjB,EAAyDN,KAAzD;EAHT,CAAA,EAKGD,QALH,CADF;AASD;AAAA,IAEoBQ,aAAN;EAAA;EAAA;EAA0D,yBAAA;IAAA;IAAA;IAAA,kCAAA,IAAA;MAAA,IAAA;IAAA;IAAA,gDAAA,IAAA;IAAA,eAAA,8CAAA,OAAA,EAgBxD;MACbW,MAAM,EAAE,CAAC,MAAKE,KAAL,CAAWN,KAAX,CAAiBC,MAAjB,CAAwB,MAAKK,KAAL,CAAWN,KAAX,CAAiBE,KAAzC,CAAA,CAAgDC,GAAjD;IADK,CAhBwD,CAAA;IAAA,eAAA,8CAAA,cAAA,EAoBhD,YAAM;MAC3B,kBAMI,MAAKG,KANT;QAAA,iCACEC,MAAM;QAANA,MAAM,mCAAID,UAAAA,KAAD;UAAA,OAA8B,KAAA,CAAA,aAAA,CAAC,qBAAD,EAAkBA,KAAlB,CADnC;QAAA;QAEJE,aAFI,eAEJA,aAFI;QAGJR,KAHI,eAGJA,KAHI;QAIJS,UAJI,eAIJA,UAJI;QAKJC,WAAAA,eAAAA,WAAAA;MAEF,OAAOH,MAAM,iCACRC,aADS;QAEZR,KAAK,EAAEA,KAFK;QAGZU,WAAW,EAAEA,WAHD;QAIZD,UAAU,EAAEA;MAAAA,GAJd;IAMD,CAlCsE,CAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAoCvEE,kBAAS;MACP,mBAOI,IAAA,CAAKL,KAPT;QACEN,KADI,gBACJA,KADI;QAEJU,WAFI,gBAEJA,WAFI;QAGJD,UAHI,gBAGJA,UAHI;QAIJb,IAJI,gBAIJA,IAJI;QAAA,qCAKJgB,qBAAqB;QAArBA,qBAAqB,sCAAG,IALpB;QAMJC,mBAAAA,gBAAAA,mBAAAA;MAEF,IAAQZ,MAAAA,GAAWD,KAAnB,CAAQC,MAAAA;MACR,IAAQG,MAAAA,GAAW,IAAA,CAAKJ,KAAxB,CAAQI,MAAAA;MAER,OACE,KAAA,CAAA,aAAA,CAAC,gCAAD,CAA0B,QAA1B,EAAA;QAAmC,KAAK,EAAEK;MAA1C,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,+BAAD,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA;QAAM,KAAK,EAAEpB,MAAM,CAACyB;MAApB,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,mCAAD,EAAA;QAEE,OAAO,EAAEF,qBAFX;QAGE,KAAK,EAAEvB,MAAM,CAAC0B;MAHhB,CAAA,EAKG,MAAM,CAACC,GAAP,CAAW,UAACC,KAAD,EAAQf,KAAR,EAAkB;QAC5B,IAAMgB,UAAU,GAAGR,WAAW,CAACO,KAAK,CAACd,GAAP,CAA9B;QACA,IAAQgB,aAAAA,GAAkBD,UAAU,CAACE,OAArC,CAAQD,aAAAA;QACR,IAAMnC,SAAS,GAAGgB,KAAK,CAACE,KAANF,KAAgBE,KAAlC;QAEA,IAAIiB,aAAa,IAAI,CAACnC,SAAtB,EAAiC;UAC/B,OAAO,IAAP;QACD;QAED,IAAIY,IAAI,IAAI,CAACQ,MAAM,CAACC,QAAPD,CAAgBa,KAAK,CAACd,GAAtBC,CAATR,IAAuC,CAACZ,SAA5C,EAAuD;UAErD,OAAO,IAAP;QACD;QAED,OACE,KAAA,CAAA,aAAA,CAAC,4BAAD,EAAA;UACE,GAAG,EAAEiC,KAAK,CAACd,GADb;UAEE,KAAK,EAAEkB,uBAAU,CAACC,YAFpB;UAGE,SAAS,EAAEtC,SAHb;UAIE,OAAO,EAAE4B;QAJX,CAAA,EAME,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;UACE,SAAS,EAAE5B,SADb;UAEE,KAAK,EAAE6B;QAFT,CAAA,EAIGK,UAAU,CAACP,MAAXO,EAJH,CANF,CADF;MAeD,CA7BA,CALH,CADF,EAqCG,IAAA,CAAKK,YAAL,EArCH,CADF,CADF,CADF;IA6CD;EAAA;IAAA;IAAA,OAxFD,kCAAgC1B,SAAhC,EAAkDC,SAAlD,EAAoE;MAClE,IAAMC,eAAe,GAAGF,SAAS,CAACG,KAAVH,CAAgBI,MAAhBJ,CAAuBA,SAAS,CAACG,KAAVH,CAAgBK,KAAvCL,CAAAA,CAA8CM,GAAtE;MAEA,OAAO;QAELC,MAAM,EAAEN,SAAS,CAACM,MAAVN,CAAiBO,QAAjBP,CAA0BC,eAA1BD,CAAAA,GACJA,SAAS,CAACM,MADNN,8CAEAA,SAAS,CAACM,MAAd,IAAsBL,eAAtB;MAJC,CAAP;IAMD;EAAA;EAAA;AAAA,EAdwCL,KAAK,CAACC,SAAlC;AAAA;gBAAMF,a,kBACG;EACpBG,IAAI,EAAE;AADc,C;AA+FxB,IAAMP,MAAM,GAAG,uBAAU,CAACmC,MAAX,CAAkB;EAC/BV,SAAS,EAAE;IACTW,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/BX,KAAK,EAAE;IACLU,IAAI,EAAE;EADD,CALwB;EAQ/BnC,OAAO,EAAE;IACPmC,IAAI,EAAE;EADC;AARsB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport {\n  NavigationHelpersContext,\n  ParamListBase,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar from './BottomTabBar';\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: string[];\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n  style,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }, style]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(focusedRouteKey)\n        ? prevState.loaded\n        : [...prevState.loaded, focusedRouteKey],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.state.routes[this.props.state.index].key],\n  };\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n      descriptors,\n    } = this.props;\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      descriptors,\n      navigation,\n      lazy,\n      detachInactiveScreens = true,\n      sceneContainerStyle,\n    } = this.props;\n    const { routes } = state;\n    const { loaded } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <SafeAreaProviderCompat>\n          <View style={styles.container}>\n            <ScreenContainer\n              // @ts-ignore\n              enabled={detachInactiveScreens}\n              style={styles.pages}\n            >\n              {routes.map((route, index) => {\n                const descriptor = descriptors[route.key];\n                const { unmountOnBlur } = descriptor.options;\n                const isFocused = state.index === index;\n\n                if (unmountOnBlur && !isFocused) {\n                  return null;\n                }\n\n                if (lazy && !loaded.includes(route.key) && !isFocused) {\n                  // Don't render a screen if we've never navigated to it\n                  return null;\n                }\n\n                return (\n                  <ResourceSavingScene\n                    key={route.key}\n                    style={StyleSheet.absoluteFill}\n                    isVisible={isFocused}\n                    enabled={detachInactiveScreens}\n                  >\n                    <SceneContent\n                      isFocused={isFocused}\n                      style={sceneContainerStyle}\n                    >\n                      {descriptor.render()}\n                    </SceneContent>\n                  </ResourceSavingScene>\n                );\n              })}\n            </ScreenContainer>\n            {this.renderTabBar()}\n          </View>\n        </SafeAreaProviderCompat>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}