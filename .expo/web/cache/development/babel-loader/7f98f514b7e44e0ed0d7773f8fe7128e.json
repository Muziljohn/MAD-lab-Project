{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _Screens = require(\"../Screens\");\nvar _HeaderSegment = require(\"../Header/HeaderSegment\");\nvar _CardContainer = _interopRequireDefault(require(\"./CardContainer\"));\nvar _TransitionPresets = require(\"../../TransitionConfigs/TransitionPresets\");\nvar _HeaderStyleInterpolators = require(\"../../TransitionConfigs/HeaderStyleInterpolators\");\nvar _CardStyleInterpolators = require(\"../../TransitionConfigs/CardStyleInterpolators\");\nvar _getDistanceForDirection = _interopRequireDefault(require(\"../../utils/getDistanceForDirection\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar EPSILON = 0.01;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getHeaderHeights = function getHeaderHeights(routes, insets, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n    var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(options.headerStyle || {}),\n      _StyleSheet$flatten$h = _StyleSheet$flatten.height,\n      height = _StyleSheet$flatten$h === void 0 ? previous[curr.key] : _StyleSheet$flatten$h;\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n    var _options$headerStatus = options.headerStatusBarHeight,\n      headerStatusBarHeight = _options$headerStatus === void 0 ? safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : (0, _HeaderSegment.getDefaultHeaderHeight)(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    _ref2$gestureDirectio = _ref2.gestureDirection,\n    gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n  return (0, _getDistanceForDirection.default)(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  (0, _inherits2.default)(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, {})\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n        height = _ref3.height;\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, (0, _defineProperty3.default)({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    var _Dimensions$get = _reactNative.Dimensions.get('window'),\n      _Dimensions$get$heigh = _Dimensions$get.height,\n      _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n      _Dimensions$get$width = _Dimensions$get.width,\n      _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        mode = _this$props.mode,\n        insets = _this$props.insets,\n        descriptors = _this$props.descriptors,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        getPreviousRoute = _this$props.getPreviousRoute,\n        getGesturesEnabled = _this$props.getGesturesEnabled,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        headerMode = _this$props.headerMode,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onPageChangeStart = _this$props.onPageChangeStart,\n        onPageChangeConfirm = _this$props.onPageChangeConfirm,\n        onPageChangeCancel = _this$props.onPageChangeCancel;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var defaultTransitionPreset = mode === 'modal' ? _TransitionPresets.ModalTransition : _TransitionPresets.DefaultTransition;\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: _HeaderStyleInterpolators.forNoAnimation\n        });\n      }\n      var _ref5 = focusedOptions.safeAreaInsets || {},\n        _ref5$top = _ref5.top,\n        top = _ref5$top === void 0 ? insets.top : _ref5$top,\n        _ref5$right = _ref5.right,\n        right = _ref5$right === void 0 ? insets.right : _ref5$right,\n        _ref5$bottom = _ref5.bottom,\n        bottom = _ref5$bottom === void 0 ? insets.bottom : _ref5$bottom,\n        _ref5$left = _ref5.left,\n        left = _ref5$left === void 0 ? insets.left : _ref5$left;\n      var isScreensEnabled = _reactNative.Platform.OS !== 'ios' && mode !== 'modal';\n      return React.createElement(React.Fragment, null, React.createElement(_Screens.MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1;\n        var _ref6 = scene.descriptor ? scene.descriptor.options : {},\n          safeAreaInsets = _ref6.safeAreaInsets,\n          headerShown = _ref6.headerShown,\n          headerTransparent = _ref6.headerTransparent,\n          cardShadowEnabled = _ref6.cardShadowEnabled,\n          cardOverlayEnabled = _ref6.cardOverlayEnabled,\n          cardOverlay = _ref6.cardOverlay,\n          cardStyle = _ref6.cardStyle,\n          animationEnabled = _ref6.animationEnabled,\n          gestureResponseDistance = _ref6.gestureResponseDistance,\n          gestureVelocityImpact = _ref6.gestureVelocityImpact,\n          _ref6$gestureDirectio = _ref6.gestureDirection,\n          gestureDirection = _ref6$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref6$gestureDirectio,\n          _ref6$transitionSpec = _ref6.transitionSpec,\n          transitionSpec = _ref6$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref6$transitionSpec,\n          _ref6$cardStyleInterp = _ref6.cardStyleInterpolator,\n          cardStyleInterpolator = _ref6$cardStyleInterp === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref6$cardStyleInterp,\n          _ref6$headerStyleInte = _ref6.headerStyleInterpolator,\n          headerStyleInterpolator = _ref6$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref6$headerStyleInte;\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n          if (nextScene) {\n            var _ref7 = nextScene.descriptor ? nextScene.descriptor.options : {},\n              _animationEnabled = _ref7.animationEnabled,\n              _ref7$gestureDirectio = _ref7.gestureDirection,\n              _gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n              _ref7$transitionSpec = _ref7.transitionSpec,\n              _transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n              _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n              _cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? _animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n              _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n              _headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n        var _ref8 = safeAreaInsets || {},\n          _ref8$top = _ref8.top,\n          safeAreaInsetTop = _ref8$top === void 0 ? insets.top : _ref8$top,\n          _ref8$right = _ref8.right,\n          safeAreaInsetRight = _ref8$right === void 0 ? insets.right : _ref8$right,\n          _ref8$bottom = _ref8.bottom,\n          safeAreaInsetBottom = _ref8$bottom === void 0 ? insets.bottom : _ref8$bottom,\n          _ref8$left = _ref8.left,\n          safeAreaInsetLeft = _ref8$left === void 0 ? insets.left : _ref8$left;\n        var previousRoute = getPreviousRoute({\n          route: scene.route\n        });\n        var previousScene = scenes[index - 1];\n        if (previousRoute) {\n          for (var j = index - 1; j >= 0; j--) {\n            var s = scenes[j];\n            if (s && s.route.key === previousRoute.key) {\n              previousScene = s;\n              break;\n            }\n          }\n        }\n        return React.createElement(_Screens.MaybeScreen, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(_CardContainer.default, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          previousScene: previousScene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeights[route.key],\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousRoute: getPreviousRoute,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          headerTransparent: headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), headerMode === 'float' ? renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousRoute: getPreviousRoute,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: styles.floating\n      }) : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref9 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref9.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexports.default = CardStack;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["EPSILON","FALLBACK_DESCRIPTOR","freeze","options","getHeaderHeights","routes","insets","descriptors","layout","previous","reduce","acc","curr","key","height","StyleSheet","flatten","headerStyle","safeAreaInsets","headerStatusBarHeight","top","getDefaultHeaderHeight","getDistanceFromOptions","mode","descriptor","gestureDirection","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","React","Component","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","Dimensions","get","e","nativeEvent","setState","previousHeight","render","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","forNoAnimationHeader","right","bottom","left","isScreensEnabled","Platform","OS","styles","container","handleLayout","focused","isScreenActive","extrapolate","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","forNoAnimationCard","transitionConfig","length","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","previousScene","j","s","absoluteFill","handleHeaderLayout","getFocusedRoute","onContentHeightChange","styleInterpolator","style","floating","create","flex","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            const isScreenActive = scene.progress.next\n              ? scene.progress.next.interpolate({\n                  inputRange: [0, 1 - EPSILON, 1],\n                  outputRange: [1, 1, 0],\n                  extrapolate: 'clamp',\n                })\n              : 1;\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const previousRoute = getPreviousRoute({ route: scene.route });\n\n            let previousScene = scenes[index - 1];\n\n            if (previousRoute) {\n              // The previous scene will be shortly before the current scene in the array\n              // So loop back from current index to avoid looping over the full array\n              for (let j = index - 1; j >= 0; j--) {\n                const s = scenes[j];\n\n                if (s && s.route.key === previousRoute.key) {\n                  previousScene = s;\n                  break;\n                }\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={previousScene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              getPreviousRoute,\n              getFocusedRoute: this.getFocusedRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              gestureDirection:\n                focusedOptions.gestureDirection !== undefined\n                  ? focusedOptions.gestureDirection\n                  : defaultTransitionPreset.gestureDirection,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}