{"ast":null,"code":"import * as React from 'react';\nexport default function useDevTools(_ref) {\n  var name = _ref.name,\n    reset = _ref.reset,\n    state = _ref.state,\n    enabled = _ref.enabled;\n  var devToolsRef = React.useRef();\n  if (enabled && process.env.NODE_ENV !== 'production' && global.__REDUX_DEVTOOLS_EXTENSION__ && devToolsRef.current === undefined) {\n    devToolsRef.current = global.__REDUX_DEVTOOLS_EXTENSION__.connect({\n      name: name\n    });\n  }\n  var devTools = devToolsRef.current;\n  var lastStateRef = React.useRef(state);\n  var actions = React.useRef([]);\n  React.useEffect(function () {\n    devTools === null || devTools === void 0 ? void 0 : devTools.init(lastStateRef.current);\n  }, [devTools]);\n  React.useEffect(function () {\n    return devTools === null || devTools === void 0 ? void 0 : devTools.subscribe(function (message) {\n      if (message.type === 'DISPATCH' && message.state) {\n        reset(JSON.parse(message.state));\n      }\n    });\n  }, [devTools, reset]);\n  var trackState = React.useCallback(function (getState) {\n    if (!devTools) {\n      return;\n    }\n    while (actions.current.length > 1) {\n      devTools.send(actions.current.shift(), lastStateRef.current);\n    }\n    var state = getState();\n    if (actions.current.length) {\n      devTools.send(actions.current.pop(), state);\n    } else {\n      devTools.send('@@UNKNOWN', state);\n    }\n    lastStateRef.current = state;\n  }, [devTools]);\n  var trackAction = React.useCallback(function (action) {\n    if (!devTools) {\n      return;\n    }\n    actions.current.push(action);\n  }, [devTools]);\n  return {\n    trackAction: trackAction,\n    trackState: trackState\n  };\n}","map":{"version":3,"sources":["useDevTools.tsx"],"names":["React","useDevTools","name","reset","state","enabled","devToolsRef","useRef","process","env","NODE_ENV","global","__REDUX_DEVTOOLS_EXTENSION__","current","undefined","connect","devTools","lastStateRef","actions","useEffect","init","subscribe","message","type","JSON","parse","trackState","useCallback","getState","length","send","shift","pop","trackAction","action","push"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationState,\n  NavigationAction,\n  PartialState,\n} from '@react-navigation/routers';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\ntype Options = {\n  enabled: boolean;\n  name: string;\n  reset: (state: NavigationState) => void;\n  state: State;\n};\n\ntype DevTools = {\n  init(value: any): void;\n  send(action: any, value: any): void;\n  subscribe(\n    listener: (message: { type: string; [key: string]: any }) => void\n  ): () => void;\n};\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface Global {\n      __REDUX_DEVTOOLS_EXTENSION__:\n        | {\n            connect(options: { name: string }): DevTools;\n            disconnect(): void;\n          }\n        | undefined;\n    }\n  }\n}\n\nexport default function useDevTools({ name, reset, state, enabled }: Options) {\n  const devToolsRef = React.useRef<DevTools>();\n\n  if (\n    enabled &&\n    process.env.NODE_ENV !== 'production' &&\n    global.__REDUX_DEVTOOLS_EXTENSION__ &&\n    devToolsRef.current === undefined\n  ) {\n    devToolsRef.current = global.__REDUX_DEVTOOLS_EXTENSION__.connect({ name });\n  }\n\n  const devTools = devToolsRef.current;\n  const lastStateRef = React.useRef<State>(state);\n  const actions = React.useRef<(NavigationAction | string)[]>([]);\n\n  React.useEffect(() => {\n    devTools?.init(lastStateRef.current);\n  }, [devTools]);\n\n  React.useEffect(\n    () =>\n      devTools?.subscribe((message) => {\n        if (message.type === 'DISPATCH' && message.state) {\n          reset(JSON.parse(message.state));\n        }\n      }),\n    [devTools, reset]\n  );\n\n  const trackState = React.useCallback(\n    (getState: () => State) => {\n      if (!devTools) {\n        return;\n      }\n\n      while (actions.current.length > 1) {\n        devTools.send(actions.current.shift(), lastStateRef.current);\n      }\n\n      const state = getState();\n\n      if (actions.current.length) {\n        devTools.send(actions.current.pop(), state);\n      } else {\n        devTools.send('@@UNKNOWN', state);\n      }\n\n      lastStateRef.current = state;\n    },\n    [devTools]\n  );\n\n  const trackAction = React.useCallback(\n    (action: NavigationAction | string) => {\n      if (!devTools) {\n        return;\n      }\n\n      actions.current.push(action);\n    },\n    [devTools]\n  );\n\n  return {\n    trackAction,\n    trackState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}